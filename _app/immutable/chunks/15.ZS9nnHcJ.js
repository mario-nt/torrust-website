import{s as vp,B as r,C as p,i as n,j as s,e as l,b as i,K as d,f,n as x,H as _,m as C,y as T}from"./scheduler.kUNk_z0W.js";import{S as yp,i as $p,b as m,d as g,m as w,t as b,a as v,e as y}from"./index.Dnzyir5L.js";import{C as cl}from"./Callout.f808ns5V.js";import{C as R}from"./CodeBlock.BwjrtB9N.js";/* empty css                                            */import{P as xp,a as _p}from"./PostContainer.BzWQqpqQ.js";import{P as Cp}from"./PostTable.CHgxS-6X.js";function Tp(h){let a,u='<a class="heading-link" title="Permalink" aria-hidden="true" href="#table-of-contents"><span>#</span></a>Table of Contents',k,o,c='<li><a href="#introduction">Introduction</a></li> <li><a href="#requirements">Requirements</a></li> <li><a href="#we-use-docker-oci-containers">We Use Docker (OCI) Containers</a></li> <li><a href="#basic-dockerized-rust-application">Basic Dockerized Rust Application</a></li> <li><a href="#use-multi-stage-builds-to-minimize-the-image-size">Use Multi-Stage Builds to Minimize the Image Size</a></li> <li><a href="#image-variants">Image Variants</a></li> <li><a href="#introduction-to-docker-layers-cache">Introduction to Docker Layers Cache</a></li> <li><a href="#caching-cargo-dependencies">Caching Cargo Dependencies</a><ul><li><a href="#demonstration-of-caching-cargo-dependencies-using-a-custom-solution">Demonstration of Caching Cargo Dependencies Using a Custom Solution</a></li> <li><a href="#caching-cargo-dependencies-with-cargo-chef">Caching Cargo Dependencies With Cargo Chef</a></li></ul></li> <li><a href="#installing-rust-binaries-with-cargo-binstall">Installing Rust Binaries With Cargo Binstall</a></li> <li><a href="#archiving-and-reusing-builds-with-cargo-nextest">Archiving And Reusing Builds With Cargo Nextest</a></li> <li><a href="#running-container-without-sudo">Running Container Without Sudo</a><ul><li><a href="#use-the-docker-run---user-argument">Use The <code>docker run --user</code> Argument</a></li> <li><a href="#create-the-user-at-runtime">Create The User At Runtime</a></li></ul></li> <li><a href="#decomposing-the-torrust-tracker-containerfile">Decomposing the Torrust Tracker Containerfile</a></li> <li><a href="#other-good-practices">Other Good Practices</a></li> <li><a href="#other-considerations">Other Considerations</a></li> <li><a href="#links">Links</a></li> <li><a href="#conclusion">Conclusion</a></li>';return{c(){a=l("h2"),a.innerHTML=u,k=r(),o=l("ul"),o.innerHTML=c,this.h()},l($){a=i($,"H2",{id:!0,"data-svelte-h":!0}),d(a)!=="svelte-1m3njcc"&&(a.innerHTML=u),k=p($),o=i($,"UL",{"data-svelte-h":!0}),d(o)!=="svelte-4wp562"&&(o.innerHTML=c),this.h()},h(){f(a,"id","table-of-contents")},m($,M){n($,a,M),n($,k,M),n($,o,M)},p:x,d($){$&&(s(a),s(k),s(o))}}}function Rp(h){let a,u,k=`<code class="language-dockerfile"><span class="token comment"># Extracted example of our Containerfile.</span>

<span class="token comment">## Base Builder Image</span>
<span class="token instruction"><span class="token keyword">FROM</span> rust:bookworm <span class="token keyword">as</span> chef</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /tmp</span>
<span class="token instruction"><span class="token keyword">RUN</span> curl -L --proto <span class="token string">'=https'</span> --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo binstall --no-confirm cargo-chef cargo-nextest</span>

<span class="token comment">## Tester Image</span>
<span class="token instruction"><span class="token keyword">FROM</span> rust:slim-bookworm <span class="token keyword">as</span> tester</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /tmp</span>
<span class="token instruction"><span class="token keyword">RUN</span> apt-get update; apt-get install -y curl; apt-get autoclean</span>
<span class="token instruction"><span class="token keyword">RUN</span> curl -L --proto <span class="token string">'=https'</span> --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo binstall --no-confirm cargo-nextest</span>

<span class="token comment">## Su Exe Compile</span>
<span class="token instruction"><span class="token keyword">FROM</span> docker.io/library/gcc:bookworm <span class="token keyword">as</span> gcc</span>
<span class="token instruction"><span class="token keyword">COPY</span> ./contrib/dev-tools/su-exec/ /usr/local/src/su-exec/</span>
<span class="token instruction"><span class="token keyword">RUN</span> cc -Wall -Werror -g /usr/local/src/su-exec/su-exec.c -o /usr/local/bin/su-exec; chmod +x /usr/local/bin/su-exec</span>

<span class="token comment">## Chef Prepare (look at project and see wat we need)</span>
<span class="token instruction"><span class="token keyword">FROM</span> chef <span class="token keyword">AS</span> recipe</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /build/src</span>
<span class="token instruction"><span class="token keyword">COPY</span> . /build/src</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo chef prepare --recipe-path /build/recipe.json</span>

<span class="token comment">## Cook (release)</span>
<span class="token instruction"><span class="token keyword">FROM</span> chef <span class="token keyword">AS</span> dependencies</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /build/src</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">recipe</span></span> /build/recipe.json /build/recipe.json</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo chef cook --tests --benches --examples --workspace --all-targets --all-features --recipe-path /build/recipe.json --release</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo nextest archive --tests --benches --examples --workspace --all-targets --all-features --archive-file /build/temp.tar.zst --release  ; rm -f /build/temp.tar.zst</span>

<span class="token comment">## Build Archive (release)</span>
<span class="token instruction"><span class="token keyword">FROM</span> dependencies <span class="token keyword">AS</span> build</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /build/src</span>
<span class="token instruction"><span class="token keyword">COPY</span> . /build/src</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo nextest archive --tests --benches --examples --workspace --all-targets --all-features --archive-file /build/full-example.tar.zst --release</span>

<span class="token comment"># Extract and Test (release)</span>
<span class="token instruction"><span class="token keyword">FROM</span> tester <span class="token keyword">as</span> test</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /test</span>
<span class="token instruction"><span class="token keyword">COPY</span> . /test/src</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">build</span></span> <span class="token operator"></span>
  /build/full-example.tar.zst <span class="token operator"></span>
  /test/full-example.tar.zst</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo nextest run --workspace-remap /test/src/ --extract-to /test/src/ --no-run --archive-file /test/full-example.tar.zst</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo nextest run --workspace-remap /test/src/ --target-dir-remap /test/src/target/ --cargo-metadata /test/src/target/nextest/cargo-metadata.json --binaries-metadata /test/src/target/nextest/binaries-metadata.json</span>

<span class="token instruction"><span class="token keyword">RUN</span> mkdir -p /app/bin/; cp -l /test/src/target/release/full-example /app/bin/full-example</span>
<span class="token instruction"><span class="token keyword">RUN</span> chown -R root:root /app; chmod -R u=rw,go=r,a+X /app; chmod -R a+x /app/bin</span>

<span class="token comment">## Runtime</span>
<span class="token instruction"><span class="token keyword">FROM</span> gcr.io/distroless/cc-debian12:debug <span class="token keyword">as</span> runtime</span>
<span class="token instruction"><span class="token keyword">RUN</span> [<span class="token string">"/busybox/cp"</span>, <span class="token string">"-sp"</span>, <span class="token string">"/busybox/sh"</span>,<span class="token string">"/busybox/cat"</span>,<span class="token string">"/busybox/ls"</span>,<span class="token string">"/busybox/env"</span>, <span class="token string">"/bin/"</span>]</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">gcc</span> <span class="token property">--chmod</span><span class="token punctuation">=</span><span class="token string">0555</span></span> /usr/local/bin/su-exec /bin/su-exec</span>
<span class="token instruction"><span class="token keyword">ARG</span> USER_ID=1000</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--chmod</span><span class="token punctuation">=</span><span class="token string">0555</span></span> ./share/container/entry_script_sh /usr/local/bin/entry.sh</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">"/usr/local/bin/entry.sh"</span>]</span>

<span class="token comment">## Release Runtime</span>
<span class="token instruction"><span class="token keyword">FROM</span> runtime <span class="token keyword">as</span> release</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">test</span></span> /app/ /usr/</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">"/usr/bin/full-example"</span>]</span></code>`;return{c(){a=l("pre"),u=new _(!1),this.h()},l(o){a=i(o,"PRE",{class:!0});var c=C(a);u=T(c,!1),c.forEach(s),this.h()},h(){u.a=null,f(a,"class","language-dockerfile")},m(o,c){n(o,a,c),u.m(k,a)},p:x,d(o){o&&s(a)}}}function Mp(h){let a,u,k=`<code class="language-dockerfile"><span class="token comment"># We start from full base defacto Debian image</span>
<span class="token instruction"><span class="token keyword">FROM</span> rust:latest</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo init</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo build --release</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">"./target/release/app"</span>]</span></code>`;return{c(){a=l("pre"),u=new _(!1),this.h()},l(o){a=i(o,"PRE",{class:!0});var c=C(a);u=T(c,!1),c.forEach(s),this.h()},h(){u.a=null,f(a,"class","language-dockerfile")},m(o,c){n(o,a,c),u.m(k,a)},p:x,d(o){o&&s(a)}}}function Lp(h){let a,u,k=`<code class="language-console">docker build -t docker-rust-app-basic .
docker run --rm -it docker-rust-app-basic

Hello, world!</code>`;return{c(){a=l("pre"),u=new _(!1),this.h()},l(o){a=i(o,"PRE",{class:!0});var c=C(a);u=T(c,!1),c.forEach(s),this.h()},h(){u.a=null,f(a,"class","language-console")},m(o,c){n(o,a,c),u.m(k,a)},p:x,d(o){o&&s(a)}}}function Hp(h){let a,u,k=`<code class="language-console">$ docker image ls | grep docker-rust-app-basic
docker-rust-app-basic                            latest          7294f20bb52c   2 minutes ago   1.39GB</code>`;return{c(){a=l("pre"),u=new _(!1),this.h()},l(o){a=i(o,"PRE",{class:!0});var c=C(a);u=T(c,!1),c.forEach(s),this.h()},h(){u.a=null,f(a,"class","language-console")},m(o,c){n(o,a,c),u.m(k,a)},p:x,d(o){o&&s(a)}}}function Pp(h){let a,u,k=`<code class="language-dockerfile"><span class="token comment"># This is the first stage. This image is used to compile the Rust application.</span>
<span class="token instruction"><span class="token keyword">FROM</span> rust:bookworm <span class="token keyword">as</span> builder</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo init</span>
<span class="token comment"># Install the package in the current directory</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo install --path .</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">"./target/release/app"</span>]</span>

<span class="token comment"># This is the production stage.</span>
<span class="token comment"># The slim image does not contain the common packages contained in the default tag and only contains the minimal packages needed to run rust.</span>
<span class="token instruction"><span class="token keyword">FROM</span> debian:bookworm-slim</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">builder</span></span> /usr/local/cargo/bin/app /usr/local/bin/app</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">"app"</span>]</span></code>`;return{c(){a=l("pre"),u=new _(!1),this.h()},l(o){a=i(o,"PRE",{class:!0});var c=C(a);u=T(c,!1),c.forEach(s),this.h()},h(){u.a=null,f(a,"class","language-dockerfile")},m(o,c){n(o,a,c),u.m(k,a)},p:x,d(o){o&&s(a)}}}function Dp(h){let a,u,k=`<code class="language-console">docker build -t docker-rust-app-multi-stage .
docker run --rm -it docker-rust-app-multi-stage
Hello, world!
$ docker image ls | grep docker-rust-app-multi-stage
docker-rust-app-multi-stage                             latest          bc3ae797b55e   11 seconds ago   84.7MB</code>`;return{c(){a=l("pre"),u=new _(!1),this.h()},l(o){a=i(o,"PRE",{class:!0});var c=C(a);u=T(c,!1),c.forEach(s),this.h()},h(){u.a=null,f(a,"class","language-console")},m(o,c){n(o,a,c),u.m(k,a)},p:x,d(o){o&&s(a)}}}function Op(h){let a,u=`We use the <code>:debug</code> variant of the distroless cc, as it includes the busybox binary,
giving us a shell that is needed to run the entry-script. We will explain this later.`;return{c(){a=l("p"),a.innerHTML=u},l(k){a=i(k,"P",{"data-svelte-h":!0}),d(a)!=="svelte-1fdq7sg"&&(a.innerHTML=u)},m(k,o){n(k,a,o)},p:x,d(k){k&&s(a)}}}function Ip(h){let a,u,k=`<code class="language-dockerfile"><span class="token instruction"><span class="token keyword">FROM</span> rust:latest <span class="token keyword">as</span> builder</span>

<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>

<span class="token comment"># Copy over the manifest files</span>
<span class="token instruction"><span class="token keyword">COPY</span> Cargo.toml Cargo.lock /app/</span>

<span class="token comment"># Create a dummy main.rs to build dependencies</span>
<span class="token instruction"><span class="token keyword">RUN</span> mkdir src &amp;&amp; echo <span class="token string">"fn main() &#123; println!("if you see this, the build broke"); &#125;"</span> > src/main.rs</span>

<span class="token comment"># This build step will cache the dependencies as they're not changed</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo build --release</span>

<span class="token comment"># Now, remove the dummy main.rs and copy your source code</span>
<span class="token instruction"><span class="token keyword">COPY</span> . /app</span>

<span class="token comment"># You'll need to update the last modified of the main.rs file to inform cargo to rebuild it</span>
<span class="token instruction"><span class="token keyword">RUN</span> touch -a -m ./src/main.rs</span>

<span class="token comment"># Build the application for release. Since dependencies are cached, this will only build your code</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo build --release</span>

<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">"./target/release/custom-dependencies-cache"</span>]</span></code>`;return{c(){a=l("pre"),u=new _(!1),this.h()},l(o){a=i(o,"PRE",{class:!0});var c=C(a);u=T(c,!1),c.forEach(s),this.h()},h(){u.a=null,f(a,"class","language-dockerfile")},m(o,c){n(o,a,c),u.m(k,a)},p:x,d(o){o&&s(a)}}}function Up(h){let a,u,k=`<code class="language-dockerfile"><span class="token instruction"><span class="token keyword">FROM</span> rust:latest <span class="token keyword">as</span> chef</span>

<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>

<span class="token comment"># Install cargo-chef</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo install cargo-chef --locked</span>

<span class="token comment"># Examines your project and builds a recipe that captures the set of information required to build your dependencies</span>
<span class="token instruction"><span class="token keyword">FROM</span> chef <span class="token keyword">AS</span> planner</span>

<span class="token instruction"><span class="token keyword">COPY</span> . .</span>

<span class="token instruction"><span class="token keyword">RUN</span> cargo chef prepare --recipe-path recipe.json</span>

<span class="token instruction"><span class="token keyword">FROM</span> chef <span class="token keyword">AS</span> builder</span>

<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">planner</span></span> /app/recipe.json recipe.json</span>

<span class="token comment"># Build dependencies - this is the caching Docker layer!</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo chef cook --release --recipe-path recipe.json</span>

<span class="token instruction"><span class="token keyword">COPY</span> . .</span>

<span class="token comment"># Build the application for release. Since dependencies are cached, this will only build your code</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo build --release</span>

<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">"./target/release/dependencies-cache-with-cargo-chef"</span>]</span></code>`;return{c(){a=l("pre"),u=new _(!1),this.h()},l(o){a=i(o,"PRE",{class:!0});var c=C(a);u=T(c,!1),c.forEach(s),this.h()},h(){u.a=null,f(a,"class","language-dockerfile")},m(o,c){n(o,a,c),u.m(k,a)},p:x,d(o){o&&s(a)}}}function Ep(h){let a,u,k=`<code class="language-dockerfile">
<span class="token instruction"><span class="token keyword">FROM</span> rust:latest</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>
<span class="token comment"># Install &#96;cargo binstall&#96;</span>
<span class="token instruction"><span class="token keyword">RUN</span> curl -L --proto <span class="token string">'=https'</span> --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash</span>
<span class="token comment"># Install Rust binaries with &#96;cargo binstall&#96;</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo binstall --no-confirm cargo-chef cargo-nextest</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo chef --version &amp;&amp; cargo nextest --version</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo init</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo build --release</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">"./target/release/app"</span>]</span>
</code>`;return{c(){a=l("pre"),u=new _(!1),this.h()},l(o){a=i(o,"PRE",{class:!0});var c=C(a);u=T(c,!1),c.forEach(s),this.h()},h(){u.a=null,f(a,"class","language-dockerfile")},m(o,c){n(o,a,c),u.m(k,a)},p:x,d(o){o&&s(a)}}}function Wp(h){let a,u,k=`<code class="language-dockerfile"><span class="token comment">## First stage to install the nextest tool</span>
<span class="token instruction"><span class="token keyword">FROM</span> rust:latest <span class="token keyword">as</span> nextest</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo install cargo-nextest --locked</span>

<span class="token comment">## Second stage to build the application and package it with nextest</span>
<span class="token instruction"><span class="token keyword">FROM</span> nextest <span class="token keyword">AS</span> builder</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /build/src</span>
<span class="token instruction"><span class="token keyword">COPY</span> . /build/src</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo build</span>
<span class="token comment"># We archive the build artifacts to reuse them in the next stage</span>
<span class="token comment"># NOTICE: the application must contains at least one integration test in order</span>
<span class="token comment"># include the binary in the archive.</span>
<span class="token comment"># See: https://github.com/nextest-rs/nextest/issues/423</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo nextest archive --tests --benches --examples --workspace --all-targets --all-features --archive-file /build/archiving-and-reusing-builds.tar.zst</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">"/build/src/target/debug/archiving-and-reusing-builds"</span>]</span>

<span class="token comment">## Third stage to test the application</span>
<span class="token instruction"><span class="token keyword">FROM</span> nextest <span class="token keyword">AS</span> tester</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /test</span>
<span class="token instruction"><span class="token keyword">COPY</span> . /test/src/</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">builder</span></span> <span class="token operator"></span>
    /build/archiving-and-reusing-builds.tar.zst <span class="token operator"></span>
    /test/archiving-and-reusing-builds.tar.zst</span>
<span class="token comment"># We extract the build artifacts from the archive</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo nextest run --workspace-remap /test/src/ --extract-to /test/src/ --no-run --archive-file /test/archiving-and-reusing-builds.tar.zst</span>
<span class="token comment"># We run the tests. We override the default target-dir to use the application binary,</span>
<span class="token comment"># otherwise it would be created in a temporary directory and we wouldn't be able to</span>
<span class="token comment"># copy it in the next stage.</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo nextest run --workspace-remap /test/src/ --target-dir-remap /test/src/target/ --cargo-metadata /test/src/target/nextest/cargo-metadata.json --binaries-metadata /test/src/target/nextest/binaries-metadata.json</span>
<span class="token instruction"><span class="token keyword">RUN</span> mkdir -p /app/bin/; cp -l /test/src/target/debug/archiving-and-reusing-builds /app/bin/archiving-and-reusing-builds</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">"/app/bin/archiving-and-reusing-builds"</span>]</span>

<span class="token comment">## Fourth stage to run the application in production</span>
<span class="token instruction"><span class="token keyword">FROM</span> nextest <span class="token keyword">AS</span> runtime</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>
<span class="token comment"># We take the application binary from the tester stage to ensure the binary we</span>
<span class="token comment"># use has passed the tests.</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">tester</span></span> /app/bin/archiving-and-reusing-builds /app/</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">"/app/archiving-and-reusing-builds"</span>]</span></code>`;return{c(){a=l("pre"),u=new _(!1),this.h()},l(o){a=i(o,"PRE",{class:!0});var c=C(a);u=T(c,!1),c.forEach(s),this.h()},h(){u.a=null,f(a,"class","language-dockerfile")},m(o,c){n(o,a,c),u.m(k,a)},p:x,d(o){o&&s(a)}}}function Np(h){let a,u=`<strong>NOTICE</strong>: The application must contain at least one integration test in order
include the binary in the archive. See this <a href="https://github.com/nextest-rs/nextest/issues/423" rel="nofollow">issue</a>
for more info.`;return{c(){a=l("p"),a.innerHTML=u},l(k){a=i(k,"P",{"data-svelte-h":!0}),d(a)!=="svelte-1nkbu6n"&&(a.innerHTML=u)},m(k,o){n(k,a,o)},p:x,d(k){k&&s(a)}}}function Fp(h){let a,u,k=`<code class="language-dockerfile"><span class="token instruction"><span class="token keyword">FROM</span> rust:latest</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo init</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo build --release</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">"./target/release/app"</span>]</span></code>`;return{c(){a=l("pre"),u=new _(!1),this.h()},l(o){a=i(o,"PRE",{class:!0});var c=C(a);u=T(c,!1),c.forEach(s),this.h()},h(){u.a=null,f(a,"class","language-dockerfile")},m(o,c){n(o,a,c),u.m(k,a)},p:x,d(o){o&&s(a)}}}function jp(h){let a,u,k=`<code class="language-console">docker build -t docker-rust-app-running-with-root .
docker run --rm -it docker-rust-app-running-with-root whoami</code>`;return{c(){a=l("pre"),u=new _(!1),this.h()},l(o){a=i(o,"PRE",{class:!0});var c=C(a);u=T(c,!1),c.forEach(s),this.h()},h(){u.a=null,f(a,"class","language-console")},m(o,c){n(o,a,c),u.m(k,a)},p:x,d(o){o&&s(a)}}}function zp(h){let a,u,k=`<code class="language-dockerfile"><span class="token instruction"><span class="token keyword">FROM</span> rust:latest</span>

<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>

<span class="token instruction"><span class="token keyword">RUN</span> cargo init</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo build --release</span>

<span class="token instruction"><span class="token keyword">USER</span> www-data</span>

<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">"./target/release/app"</span>]</span></code>`;return{c(){a=l("pre"),u=new _(!1),this.h()},l(o){a=i(o,"PRE",{class:!0});var c=C(a);u=T(c,!1),c.forEach(s),this.h()},h(){u.a=null,f(a,"class","language-dockerfile")},m(o,c){n(o,a,c),u.m(k,a)},p:x,d(o){o&&s(a)}}}function Sp(h){let a,u,k=`<code class="language-console">docker run --rm -it docker-rust-app-running-with-root cat /etc/passwd | grep www-data
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin</code>`;return{c(){a=l("pre"),u=new _(!1),this.h()},l(o){a=i(o,"PRE",{class:!0});var c=C(a);u=T(c,!1),c.forEach(s),this.h()},h(){u.a=null,f(a,"class","language-console")},m(o,c){n(o,a,c),u.m(k,a)},p:x,d(o){o&&s(a)}}}function Ap(h){let a,u,k=`<code class="language-dockerfile"><span class="token instruction"><span class="token keyword">FROM</span> rust:latest</span>

<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>

<span class="token instruction"><span class="token keyword">RUN</span> cargo init</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo build --release</span>

<span class="token instruction"><span class="token keyword">RUN</span> groupadd -r appuser</span>
<span class="token instruction"><span class="token keyword">RUN</span> useradd -r -u 1001 -g appuser appuser</span>

<span class="token instruction"><span class="token keyword">USER</span> appuser</span>

<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">"./target/release/app"</span>]</span></code>`;return{c(){a=l("pre"),u=new _(!1),this.h()},l(o){a=i(o,"PRE",{class:!0});var c=C(a);u=T(c,!1),c.forEach(s),this.h()},h(){u.a=null,f(a,"class","language-dockerfile")},m(o,c){n(o,a,c),u.m(k,a)},p:x,d(o){o&&s(a)}}}function Yp(h){let a,u=`The Linux Standard Base Core Specification defines three different ranges for
user IDs, the value from 0 to 99, 100 to 999, and 1000 and above. The first two
ranges are reserved for system users. All the regular users start from 1000.
It’s also important to note that the user ID 0 is reserved for the root user and
Linux kernel uses the user id and group id to handle the permissions. The host
machine and the docker container might have the same user ID but different usernames.`;return{c(){a=l("p"),a.textContent=u},l(k){a=i(k,"P",{"data-svelte-h":!0}),d(a)!=="svelte-ivivrm"&&(a.textContent=u)},m(k,o){n(k,a,o)},p:x,d(k){k&&s(a)}}}function qp(h){let a,u,k=`<code class="language-console">docker run --user www-data --rm -it docker-rust-app-running-with-root whoami
www-data</code>`;return{c(){a=l("pre"),u=new _(!1),this.h()},l(o){a=i(o,"PRE",{class:!0});var c=C(a);u=T(c,!1),c.forEach(s),this.h()},h(){u.a=null,f(a,"class","language-console")},m(o,c){n(o,a,c),u.m(k,a)},p:x,d(o){o&&s(a)}}}function Bp(h){let a,u,k=`<code class="language-console">$ docker run --user 1001 --rm -it docker-rust-app-running-with-root bash
I have no name!@895b0f6a3dbb:/app$</code>`;return{c(){a=l("pre"),u=new _(!1),this.h()},l(o){a=i(o,"PRE",{class:!0});var c=C(a);u=T(c,!1),c.forEach(s),this.h()},h(){u.a=null,f(a,"class","language-console")},m(o,c){n(o,a,c),u.m(k,a)},p:x,d(o){o&&s(a)}}}function Kp(h){let a,u,k=`<code class="language-dockerfile">
<span class="token comment">## Compile su-exec</span>
<span class="token instruction"><span class="token keyword">FROM</span> docker.io/library/gcc:bookworm <span class="token keyword">as</span> gcc</span>
<span class="token instruction"><span class="token keyword">COPY</span> ./contrib/dev-tools/su-exec/ /usr/local/src/su-exec/</span>
<span class="token instruction"><span class="token keyword">RUN</span> cc -Wall -Werror -g /usr/local/src/su-exec/su-exec.c -o /usr/local/bin/su-exec; chmod +x /usr/local/bin/su-exec</span>

<span class="token comment">## Application</span>
<span class="token instruction"><span class="token keyword">FROM</span> rust:bookworm <span class="token keyword">as</span> builder</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo init</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo build --release</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">"./target/release/app"</span>]</span>

<span class="token comment">## Runtime</span>
<span class="token instruction"><span class="token keyword">FROM</span> gcr.io/distroless/cc-debian12:debug <span class="token keyword">as</span> runtime</span>
<span class="token instruction"><span class="token keyword">RUN</span> [<span class="token string">"/busybox/cp"</span>, <span class="token string">"-sp"</span>, <span class="token string">"/busybox/sh"</span>,<span class="token string">"/busybox/cat"</span>,<span class="token string">"/busybox/ls"</span>,<span class="token string">"/busybox/env"</span>, <span class="token string">"/bin/"</span>]</span>

<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">builder</span></span> /app/target/release/app /usr/local/bin/app</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">gcc</span> <span class="token property">--chmod</span><span class="token punctuation">=</span><span class="token string">0555</span></span> /usr/local/bin/su-exec /bin/su-exec</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--chmod</span><span class="token punctuation">=</span><span class="token string">0555</span></span> ./share/container/entry_script_sh /usr/local/bin/entry.sh</span>

<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">"/usr/local/bin/entry.sh"</span>]</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">"/usr/local/bin/app"</span>]</span>
</code>`;return{c(){a=l("pre"),u=new _(!1),this.h()},l(o){a=i(o,"PRE",{class:!0});var c=C(a);u=T(c,!1),c.forEach(s),this.h()},h(){u.a=null,f(a,"class","language-dockerfile")},m(o,c){n(o,a,c),u.m(k,a)},p:x,d(o){o&&s(a)}}}function Gp(h){let a,u=`“su-exec” is a simple tool that will simply execute a program with different privileges.
The program will be executed directly and not run as a child, like su and sudo does,
which avoids TTY and signal issues (see below).`,k,o,c=`Notice that su-exec depends on being run by the root user, non-root users do not
have permission to change uid/gid.`;return{c(){a=l("p"),a.textContent=u,k=r(),o=l("p"),o.textContent=c},l($){a=i($,"P",{"data-svelte-h":!0}),d(a)!=="svelte-1qseehr"&&(a.textContent=u),k=p($),o=i($,"P",{"data-svelte-h":!0}),d(o)!=="svelte-r9pi87"&&(o.textContent=c)},m($,M){n($,a,M),n($,k,M),n($,o,M)},p:x,d($){$&&(s(a),s(k),s(o))}}}function Vp(h){let a,u,k=`<code class="language-dockerfile"><span class="token comment">## Base Builder Image</span>
<span class="token instruction"><span class="token keyword">FROM</span> rust:bookworm <span class="token keyword">as</span> chef</span>
<span class="token comment"># Install tools needed to build the application: cargo-chef cargo-nextest</span>

<span class="token comment">## Tester Image</span>
<span class="token instruction"><span class="token keyword">FROM</span> rust:slim-bookworm <span class="token keyword">as</span> tester</span>
<span class="token comment"># Install tools needed to test the application: cargo-nextest</span>

<span class="token comment">## Su Exe Compile</span>
<span class="token instruction"><span class="token keyword">FROM</span> docker.io/library/gcc:bookworm <span class="token keyword">as</span> gcc</span>
<span class="token comment"># Compile the su-exec program which is used at runtime to change the user running the container.</span>

<span class="token comment">## Chef Prepare (look at project and see wat we need)</span>
<span class="token instruction"><span class="token keyword">FROM</span> chef <span class="token keyword">AS</span> recipe</span>
<span class="token comment"># Prepare the info needed to build and cache cargo dependencies</span>

<span class="token comment">## Cook (release)</span>
<span class="token instruction"><span class="token keyword">FROM</span> chef <span class="token keyword">AS</span> dependencies</span>
<span class="token comment"># Re-hydrate the minimum project skeleton identified by &#96;cargo chef prepare&#96; and build it to cache dependencies</span>

<span class="token comment">## Build Archive (release)</span>
<span class="token instruction"><span class="token keyword">FROM</span> dependencies <span class="token keyword">AS</span> build</span>
<span class="token comment"># build and archive the application</span>

<span class="token comment"># Extract and Test (release)</span>
<span class="token instruction"><span class="token keyword">FROM</span> tester <span class="token keyword">as</span> test</span>
<span class="token comment"># Extract the application from the archived artifacts and run the tests.</span>
<span class="token comment"># And copy the binary to an specified location so it can be used in the &#96;release&#96;</span>
<span class="token comment"># stage.</span>

<span class="token comment">## Runtime</span>
<span class="token instruction"><span class="token keyword">FROM</span> gcr.io/distroless/cc-debian12:debug <span class="token keyword">as</span> runtime</span>
<span class="token comment"># Minimal image to run the app in production.</span>
<span class="token comment"># Includes the entrypoint to setup and run the application with a different user Id.</span>

<span class="token comment">## Release Runtime</span>
<span class="token instruction"><span class="token keyword">FROM</span> runtime <span class="token keyword">as</span> release</span>
<span class="token comment"># Runtime for release mode. It copies the binary from the &#96;test&#96; stage and runs it</span>
<span class="token comment"># via the entrypoint added in the &#96;runtime&#96; stage.</span></code>`;return{c(){a=l("pre"),u=new _(!1),this.h()},l(o){a=i(o,"PRE",{class:!0});var c=C(a);u=T(c,!1),c.forEach(s),this.h()},h(){u.a=null,f(a,"class","language-dockerfile")},m(o,c){n(o,a,c),u.m(k,a)},p:x,d(o){o&&s(a)}}}function Jp(h){let a,u,k=`<code class="language-dockerfile"><span class="token comment">## Base Builder Image</span>
<span class="token instruction"><span class="token keyword">FROM</span> rust:bookworm <span class="token keyword">as</span> chef</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /tmp</span>
<span class="token instruction"><span class="token keyword">RUN</span> curl -L --proto <span class="token string">'=https'</span> --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo binstall --no-confirm cargo-chef cargo-nextest</span></code>`;return{c(){a=l("pre"),u=new _(!1),this.h()},l(o){a=i(o,"PRE",{class:!0});var c=C(a);u=T(c,!1),c.forEach(s),this.h()},h(){u.a=null,f(a,"class","language-dockerfile")},m(o,c){n(o,a,c),u.m(k,a)},p:x,d(o){o&&s(a)}}}function Qp(h){let a,u,k=`<code class="language-dockerfile"><span class="token comment">## Base Tester Image</span>
<span class="token instruction"><span class="token keyword">FROM</span> rust:slim-bookworm <span class="token keyword">as</span> tester</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /tmp</span>
<span class="token instruction"><span class="token keyword">RUN</span> apt-get update; apt-get install -y curl; apt-get autoclean</span>
<span class="token instruction"><span class="token keyword">RUN</span> curl -L --proto <span class="token string">'=https'</span> --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo binstall --no-confirm cargo-nextest</span></code>`;return{c(){a=l("pre"),u=new _(!1),this.h()},l(o){a=i(o,"PRE",{class:!0});var c=C(a);u=T(c,!1),c.forEach(s),this.h()},h(){u.a=null,f(a,"class","language-dockerfile")},m(o,c){n(o,a,c),u.m(k,a)},p:x,d(o){o&&s(a)}}}function Xp(h){let a,u,k=`<code class="language-dockerfile"><span class="token comment">## Su Exe Compile</span>
<span class="token instruction"><span class="token keyword">FROM</span> docker.io/library/gcc:bookworm <span class="token keyword">as</span> gcc</span>
<span class="token instruction"><span class="token keyword">COPY</span> ./contrib/dev-tools/su-exec/ /usr/local/src/su-exec/</span>
<span class="token instruction"><span class="token keyword">RUN</span> cc -Wall -Werror -g /usr/local/src/su-exec/su-exec.c -o /usr/local/bin/su-exec; chmod +x /usr/local/bin/su-exec</span></code>`;return{c(){a=l("pre"),u=new _(!1),this.h()},l(o){a=i(o,"PRE",{class:!0});var c=C(a);u=T(c,!1),c.forEach(s),this.h()},h(){u.a=null,f(a,"class","language-dockerfile")},m(o,c){n(o,a,c),u.m(k,a)},p:x,d(o){o&&s(a)}}}function Zp(h){let a,u,k=`<code class="language-dockerfile"><span class="token comment">## Chef Prepare (look at project and see wat we need)</span>
<span class="token instruction"><span class="token keyword">FROM</span> chef <span class="token keyword">AS</span> recipe</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /build/src</span>
<span class="token instruction"><span class="token keyword">COPY</span> . /build/src</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo chef prepare --recipe-path /build/recipe.json</span></code>`;return{c(){a=l("pre"),u=new _(!1),this.h()},l(o){a=i(o,"PRE",{class:!0});var c=C(a);u=T(c,!1),c.forEach(s),this.h()},h(){u.a=null,f(a,"class","language-dockerfile")},m(o,c){n(o,a,c),u.m(k,a)},p:x,d(o){o&&s(a)}}}function ec(h){let a,u,k=`<code class="language-dockerfile"><span class="token comment">## Cook (release)</span>
<span class="token instruction"><span class="token keyword">FROM</span> chef <span class="token keyword">AS</span> dependencies</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /build/src</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">recipe</span></span> /build/recipe.json /build/recipe.json</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo chef cook --tests --benches --examples --workspace --all-targets --all-features --recipe-path /build/recipe.json --release</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo nextest archive --tests --benches --examples --workspace --all-targets --all-features --archive-file /build/temp.tar.zst --release  ; rm -f /build/temp.tar.zst</span></code>`;return{c(){a=l("pre"),u=new _(!1),this.h()},l(o){a=i(o,"PRE",{class:!0});var c=C(a);u=T(c,!1),c.forEach(s),this.h()},h(){u.a=null,f(a,"class","language-dockerfile")},m(o,c){n(o,a,c),u.m(k,a)},p:x,d(o){o&&s(a)}}}function tc(h){let a,u,k=`<code class="language-dockerfile"><span class="token comment">## Build Archive (release)</span>
<span class="token instruction"><span class="token keyword">FROM</span> dependencies <span class="token keyword">AS</span> build</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /build/src</span>
<span class="token instruction"><span class="token keyword">COPY</span> . /build/src</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo nextest archive --tests --benches --examples --workspace --all-targets --all-features --archive-file /build/full-example.tar.zst --release</span></code>`;return{c(){a=l("pre"),u=new _(!1),this.h()},l(o){a=i(o,"PRE",{class:!0});var c=C(a);u=T(c,!1),c.forEach(s),this.h()},h(){u.a=null,f(a,"class","language-dockerfile")},m(o,c){n(o,a,c),u.m(k,a)},p:x,d(o){o&&s(a)}}}function sc(h){let a,u,k=`<code class="language-dockerfile"><span class="token comment">## Extract and Test (release)</span>
<span class="token instruction"><span class="token keyword">FROM</span> tester <span class="token keyword">as</span> test</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /test</span>
<span class="token instruction"><span class="token keyword">COPY</span> . /test/src</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">build</span></span> <span class="token operator"></span>
  /build/full-example.tar.zst <span class="token operator"></span>
  /test/full-example.tar.zst</span>
<span class="token comment"># It compiles without running the tests to make sure there are no problems with</span>
<span class="token comment"># the archive.</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo nextest run --workspace-remap /test/src/ --extract-to /test/src/ --no-run --archive-file /test/full-example.tar.zst</span>
<span class="token comment"># We actually run the tests</span>
<span class="token instruction"><span class="token keyword">RUN</span> cargo nextest run --workspace-remap /test/src/ --target-dir-remap /test/src/target/ --cargo-metadata /test/src/target/nextest/cargo-metadata.json --binaries-metadata /test/src/target/nextest/binaries-metadata.json</span>
<span class="token comment"># We copy the application binary to a specified location so we can get it from</span>
<span class="token comment"># there in the final runtime stage.</span>
<span class="token instruction"><span class="token keyword">RUN</span> mkdir -p /app/bin/; cp -l /test/src/target/release/full-example /app/bin/full-example</span>
<span class="token comment"># Since we use su-exec. We need to run the container as root.</span>
<span class="token instruction"><span class="token keyword">RUN</span> chown -R root:root /app; chmod -R u=rw,go=r,a+X /app; chmod -R a+x /app/bin</span></code>`;return{c(){a=l("pre"),u=new _(!1),this.h()},l(o){a=i(o,"PRE",{class:!0});var c=C(a);u=T(c,!1),c.forEach(s),this.h()},h(){u.a=null,f(a,"class","language-dockerfile")},m(o,c){n(o,a,c),u.m(k,a)},p:x,d(o){o&&s(a)}}}function nc(h){let a,u,k=`<code class="language-dockerfile"><span class="token comment">## Runtime</span>
<span class="token instruction"><span class="token keyword">FROM</span> gcr.io/"distroless/cc-debian12:debug <span class="token keyword">as</span> runtime</span>
<span class="token instruction"><span class="token keyword">RUN</span> [<span class="token string">"/busybox/cp"</span>, <span class="token string">"-sp"</span>, <span class="token string">"/busybox/sh"</span>,<span class="token string">"/busybox/cat"</span>,<span class="token string">"/busybox/ls"</span>,<span class="token string">"/busybox/env"</span>, <span class="token string">"/bin/"</span>]</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">gcc</span> <span class="token property">--chmod</span><span class="token punctuation">=</span><span class="token string">0555</span></span> /usr/local/bin/su-exec /bin/su-exec</span>
<span class="token instruction"><span class="token keyword">ARG</span> USER_ID=1000</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--chmod</span><span class="token punctuation">=</span><span class="token string">0555</span></span> ./share/container/entry_script_sh /usr/local/bin/entry.sh</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">"/usr/local/bin/entry.sh"</span>]</span></code>`;return{c(){a=l("pre"),u=new _(!1),this.h()},l(o){a=i(o,"PRE",{class:!0});var c=C(a);u=T(c,!1),c.forEach(s),this.h()},h(){u.a=null,f(a,"class","language-dockerfile")},m(o,c){n(o,a,c),u.m(k,a)},p:x,d(o){o&&s(a)}}}function ac(h){let a,u,k=`<code class="language-dockerfile"><span class="token comment">## Release Runtime</span>
<span class="token instruction"><span class="token keyword">FROM</span> runtime <span class="token keyword">as</span> release</span>
<span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">test</span></span> /app/ /usr/</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">"/usr/bin/full-example"</span>]</span></code>`;return{c(){a=l("pre"),u=new _(!1),this.h()},l(o){a=i(o,"PRE",{class:!0});var c=C(a);u=T(c,!1),c.forEach(s),this.h()},h(){u.a=null,f(a,"class","language-dockerfile")},m(o,c){n(o,a,c),u.m(k,a)},p:x,d(o){o&&s(a)}}}function oc(h){let a,u='<a class="heading-link" title="Permalink" aria-hidden="true" href="#introduction"><span>#</span></a>Introduction',k,o,c=`BitTorrent, an age-old protocol, is a powerful way to share data over the internet.
In our journey to building robust BitTorrent projects, we’ve chosen the Rust
programming language for its memory safety and concurrency features. To streamline
the development and distribution of our projects, we’ve also employed Docker and
Podman.`,$,M,zs=`In this post, we’ll dive deep into the best practices we’ve adopted for
dockerizing our Rust applications.`,qs,De,ul='Our <a href="https://docs.docker.com/engine/reference/builder/" rel="nofollow">Containerfiles</a>, <em>commonly called a <code>&quot;Dockerfile&quot;</code></em>, are stored in the roots of our two main rust repositories, for reference:',Bs,Oe,dl='<li>Torrust-Tracker <a href="https://github.com/torrust/torrust-tracker/blob/develop/Containerfile" rel="nofollow">Containerfile</a>.</li> <li>Torrust-Index <a href="https://github.com/torrust/torrust-index/blob/develop/Containerfile" rel="nofollow">Containerfile</a>.</li>',Ks,L,kl='<a class="heading-link" title="Permalink" aria-hidden="true" href="#example"><span>#</span></a>Example',Gs,Ie,hl=`All of the examples included in this blog post are publicly available in our ”<a href="https://github.com/torrust/containerizing-rust-apps-examples" rel="nofollow">Containerizing Rust Apps Examples</a>”
GitHub Repository.`,Vs,Ue,fl=`<p><strong><em>Please Note:</em></strong> The actual <code>Containerfile</code> for the <strong>Tracker</strong> and <strong>Index</strong> services builds images for
both <code>debug</code> and <code>release</code> modes. For learning purposes we are using a simplified
version here which only builds the <code>release</code> mode:</p>`,Js,H,Qs,Ee,ml=`The real version in production contains some duplicate stages to build the <code>debug</code>
mode. Those stages are almost identical to the ones in this example and are therefore omitted. Only some flags and names change.`,Xs,We,gl=`Don’t be scared of the example, next we will go through all the lines and explain what
they do, but before doing that, we will explain some basic concepts and the patterns
applied one by one.`,Zs,P,wl='<a class="heading-link" title="Permalink" aria-hidden="true" href="#requirements"><span>#</span></a>Requirements',en,Ne,bl="In order to run some of the examples in this article you will need to install:",tn,Fe,vl='<li><a href="https://docs.docker.com/get-docker/" rel="nofollow">Docker version 24.0.6, build ed223bc</a></li>',sn,D,yl='<a class="heading-link" title="Permalink" aria-hidden="true" href="#we-use-docker-oci-containers"><span>#</span></a>We Use Docker (OCI) Containers',nn,je,$l='The standardized <a href="https://opencontainers.org/" rel="nofollow">Open Container Initiative (OCI)</a> allows Torrust the possibility of reliable and cross-platform distribution and deployment of our Software.',an,ze,xl="This allows for administrators who may be interested in our software to quickly and easily test-out our software and see if it suits their needs. It also allows administrators to more easily deploy our software, as most of the web-hosting systems have great support for OCI Containers.",on,Se,_l='In addition, our End-to-End testing infrastructure is made easier by using a <a href="https://docs.docker.com/compose/" rel="nofollow">docker-compose</a> configuration, that is taking advantage of our docker containers.',ln,O,Cl='<a class="heading-link" title="Permalink" aria-hidden="true" href="#basic-dockerized-rust-application"><span>#</span></a>Basic Dockerized Rust Application',rn,Ae,Tl="The simplest Dockerfile for a Rust application is as follows:",pn,I,cn,Ye,Rl="And you can build the image and run it with:",un,U,dn,qe,Ml="That creates a docker image which is <strong>1.39 GB</strong>!.",kn,E,hn,Be,Ll=`We are going to see how to improve
that and other things like common patters, good practices and other considerations.`,fn,W,Hl='<a class="heading-link" title="Permalink" aria-hidden="true" href="#use-multi-stage-builds-to-minimize-the-image-size"><span>#</span></a>Use Multi-Stage Builds to Minimize the Image Size',mn,Ke,Pl="A common pattern to build smaller docker images is to use multi-stage Dockerfiles.",gn,Ge,Dl=`You can compile your application with all of the Rust tooling and then use the
final binary in a slim operating system. This image does not contain the common
packages contained in the default tag and only contains the minimal packages
needed to run your compiled Rust application.`,wn,N,bn,Ve,Ol="The example is very easy and you can build and run the image with:",vn,F,yn,Je,Il="As you can see this new image is only 84.7MB. That’s a huge improvement!",$n,j,Ul='<a class="heading-link" title="Permalink" aria-hidden="true" href="#image-variants"><span>#</span></a>Image Variants',xn,Qe,El="As you can see in our <code>Containerfile</code>, the images we are using are the following:",_n,z,Wl='<a class="heading-link" title="Permalink" aria-hidden="true" href="#rustbookworm"><span>#</span></a>rust:bookworm',Cn,Xe,Tn,mp='<code class="language-dockerfile"><span class="token instruction"><span class="token keyword">FROM</span> rust:bookworm</span></code>',Rn,Ze,Nl=`At the time of writing this article the latest release is <a href="https://www.debian.org/releases/bookworm/" rel="nofollow">Debian 12.2</a>.
It is also (currently) known as stable or by its codename “Bookworm”. You will
see that we use that one because it is the latest one.`,Mn,S,Fl='<a class="heading-link" title="Permalink" aria-hidden="true" href="#rustslim-bookworm"><span>#</span></a>rust:slim-bookworm',Ln,et,Hn,gp='<code class="language-dockerfile"><span class="token instruction"><span class="token keyword">FROM</span> rust:slim-bookworm</span></code>',Pn,tt,jl=`Images with the <code>slim</code> suffix do not contain the common packages contained in the
default tag and only contain the minimal packages needed to run rust. We are using
it for the “tester” stage.`,Dn,A,zl='<a class="heading-link" title="Permalink" aria-hidden="true" href="#gccbookworm"><span>#</span></a>gcc:bookworm',On,st,In,wp='<code class="language-dockerfile"><span class="token instruction"><span class="token keyword">FROM</span> docker.io/library/gcc:bookworm</span></code>',Un,nt,Sl=`The GCC image is used to compile an small C program which is a simple tool that
just executes a program with different privileges. When we start the container
we run it with a USER ID passed by an environment variable and not with <code>root</code>
privileges.`,En,Y,Al='<a class="heading-link" title="Permalink" aria-hidden="true" href="#cc-debian12debug"><span>#</span></a>cc-debian12:debug',Wn,at,Nn,bp='<code class="language-dockerfile"><span class="token instruction"><span class="token keyword">FROM</span> gcr.io/gcr.io/distroless/cc-debian12:debug</span></code>',Fn,ot,Yl='And finally a “Distroless” container image is used for runtime. <a href="https://github.com/GoogleContainerTools/distroless#why-should-i-use-distroless-images" rel="nofollow">Why should you use distroless images?</a>.',jn,lt,ql="<li>They are small.</li> <li>They only have what you need to run your app.</li> <li>They reduce the risk of vulnerabilities.</li>",zn,q,Sn,B,Bl='<a class="heading-link" title="Permalink" aria-hidden="true" href="#introduction-to-docker-layers-cache"><span>#</span></a>Introduction To Docker Layers Cache',An,it,Kl="Caching is a pivotal aspect of optimizing Docker builds, especially with Rust projects. Proper caching ensures faster builds, as unchanged dependencies don’t have to be recompiled. By leveraging Docker’s layer caching mechanism, we can effectively cache Rust dependencies and speed up our Docker builds.",Yn,rt,Gl="Docker uses a layered filesystem to store images. Each layer is a set of changes to the filesystem. When you create a new container, you add a new writable layer on top of the underlying layers. This layer is often called the “container layer”. All changes made to the running container, such as writing new files, modifying existing files, and deleting files, are written to this thin writable container layer.",qn,K,Vl='<a class="heading-link" title="Permalink" aria-hidden="true" href="#caching-cargo-dependencies"><span>#</span></a>Caching cargo dependencies',Bn,pt,Jl="A common pattern used in all languages is to separate the dependencies installation from the application build. This is done to take advantage of the Docker layer caching mechanism. The dependencies installation is done in a separate layer, and the application build is done in a separate layer. This way, if the application code changes, the dependencies installation layer is not rebuilt, and only the application build layer is rebuilt.",Kn,ct,Ql="This improves build times because dependencies installation is usually a time-consuming process and it is something you normally do not change often. The application build, on the other hand, is something you change often, and it is usually a quick process.",Gn,ut,Xl="Docker build is executed in the order that you define instructions so you put things that change less frequently at the beginning of the Dockerfile and things that change more frequently at the end of the Dockerfile.",Vn,dt,Zl="There are two levels of dependencies:",Jn,kt,ei='<li>System dependencies. For instance <code>SQLite</code>, <code>curl</code> and other libraries your application depends on.</li> <li>Rust dependencies. These are the Rust packages that you want to install using cargo. Rust packages are called <code>crates</code> and you can find them on <a href="https://crates.io/" rel="nofollow">https://crates.io/</a></li>',Qn,G,ti='<a class="heading-link" title="Permalink" aria-hidden="true" href="#demonstration-of-caching-cargo-dependencies-using-a-custom-solution"><span>#</span></a>Demonstration of Caching Cargo Dependencies Using a Custom Solution',Xn,ht,si="First we demonstrate how cargo dependencies caching works but showing a custom solution:",Zn,ft,ni=`We first create an <strong>empty application configuration</strong> which uses the same dependencies.
We build the application, downloading and building all the dependencies and creating a docker cache layer.`,ea,mt,ai=`Then we build the application. With these layers yo do not need to re-build the dependencies
when you change the application code.`,ta,V,sa,gt,oi='Instead of this custom solution, we use and recommend <a href="https://github.com/LukeMathWalker/cargo-chef" rel="nofollow">cargo chef</a> which is a cargo-subcommand that specializes in speeding up Rust Docker builds using Docker layer caching.',na,J,li='<a class="heading-link" title="Permalink" aria-hidden="true" href="#caching-cargo-dependencies-with-cargo-chef"><span>#</span></a>Caching Cargo Dependencies With Cargo Chef',aa,wt,ii='In this example, we show how to use <a href="https://github.com/LukeMathWalker/cargo-chef" rel="nofollow">cargo chef</a>, that we prefer to use.',oa,Q,la,bt,ri='While it does more or less the same as the custom solution. It caches dependencies in a separate layer and has some other <a href="https://github.com/LukeMathWalker/cargo-chef#benefits-of-cargo-chef" rel="nofollow">benefits</a>.',ia,X,pi='<a class="heading-link" title="Permalink" aria-hidden="true" href="#installing-rust-binaries-with-cargo-binstall"><span>#</span></a>Installing Rust Binaries With Cargo Binstall',ra,vt,ci="<code>cargo binstall</code> is a cargo subcommand that allows installing Rust binaries as an alternative to building from source (via cargo install) or manually downloading packages.",pa,yt,ui='Cargo Binstall repo: <a href="https://github.com/cargo-bins/cargo-binstall" rel="nofollow">https://github.com/cargo-bins/cargo-binstall</a>.',ca,$t,di="We are using it to install <code>cargo chef</code> and <code>cargo nextest</code> packages easily.",ua,Z,da,ee,ki='<a class="heading-link" title="Permalink" aria-hidden="true" href="#archiving-and-reusing-builds-with-cargo-nextest"><span>#</span></a>Archiving And Reusing Builds With Cargo Nextest',ka,xt,hi='<a href="https://nexte.st/" rel="nofollow">cargo-nextest</a> is a Rust test runner.',ha,_t,fi=`It has a subcommand <code>cargo nextest archive</code> that can archive builds artifacts.
This is useful to separate the “build” phase from the “run” phase.`,fa,Ct,mi=`In the <a href="https://nexte.st/book/reusing-builds.html" rel="nofollow">official documentation</a> they
describe some use cases like:`,ma,Tt,gi="<li><strong>Cross-compilation</strong>. The build machine has a different architecture, or runs a different operating system, from the target machine.</li> <li><strong>Test partitioning</strong>. Build once on the build machine, then partition test execution across multiple target machines.</li> <li><strong>Saving execution time</strong> on more valuable machines. For example, build tests on a regular machine, then run them on a machine with a GPU attached to it.</li>",ga,Rt,wi="We are using it for two reasons:",wa,Mt,bi=`<li><strong>Test partitioning</strong>. We build the application in a docker stage and then run
the tests in another stage. This way we can separate the build and test phases.</li> <li><strong>Passing the binary to the next stage</strong>. After building the application we archive
the build artifacts and then we extract them in the next stage to run the tests.
Finally we copy the binary to the final “runtime” stage.</li>`,ba,te,va,se,ya,ne,vi='<a class="heading-link" title="Permalink" aria-hidden="true" href="#running-container-without-sudo"><span>#</span></a>Running Container Without Sudo',$a,Lt,yi="By default docker is installed and runs containers as <code>root</code>. If you build this image:",xa,ae,_a,Ht,$i="And you run it with the following command:",Ca,oe,Ta,Pt,xi="You will see it is executed as <code>root</code>.",Ra,Dt,_i="You should not execute containers as <code>root</code> because of:",Ma,Ot,Ci="<li><p><strong>The Principle of Least Privilege</strong>: This is a security concept that encourages the minimal user permission level necessary to perform a task. Running containers as root goes against this principle because if a process inside the container can run with root privileges, it can execute any command inside the container, which could be dangerous if the container gets compromised.</p></li> <li><p><strong>Host System Vulnerability</strong>: Containers are designed to be isolated from the host system. However, there are ways that a container could potentially interact with the host, particularly if there are misconfigurations or vulnerabilities in the container runtime or the host’s kernel. A container running as root might be able to exploit such vulnerabilities to gain control over the host system.</p></li> <li><p><strong>Immutable Infrastructure</strong>: Containers are often used as part of an immutable infrastructure, where container images are pre-built and should not change. Running as root makes it easier to make changes to the running container, which can lead to “configuration drift” and unexpected behavior.</p></li> <li><p><strong>Accidental Damage</strong>: Even if an attacker does not compromise the container, running as root increases the risk of accidental damage by the container’s own applications or administrators. For example, a poorly crafted command could delete critical files or disrupt important processes.</p></li>",La,It,Ti="There are some ways to avoid running the container as <code>root</code>. We will see all of them.",Ha,le,Ri='<a class="heading-link" title="Permalink" aria-hidden="true" href="#use-the-user-instruction"><span>#</span></a>Use the <code>USER</code> instruction',Pa,ie,Da,Ut,Mi=`You can add the <code>USER</code> instruction before the last command. In that example we
know that the base image already contains the user <code>www-data</code>.`,Oa,re,Ia,Et,Li="But you can also create a specific user for your application:",Ua,pe,Ea,Wt,Hi=`Using the <code>USER</code> instruction is considered a good practice because by default the container
will not run as root. In that example, docker will run the container as the user with the ID <code>1001</code>.`,Wa,ce,Na,Nt,Pi=`If you run that container, <code>appuser</code> will have the same permissions as the user <code>1001</code>
in the host system, whatever it is the name of that user in the host machine.`,Fa,ue,Di='<a class="heading-link" title="Permalink" aria-hidden="true" href="#use-the-docker-run---user-argument"><span>#</span></a>Use The <code>docker run --user</code> Argument',ja,Ft,Oi="You can also overwrite the user running the container with the argument <code>--user</code>:",za,de,Sa,jt,Ii=`In this example, even though the image is executed as root by default, it will be
executed as the <code>www-data</code> user.`,Aa,zt,Ui="Notice you can even use a non-existing user in both the host and the docker image.",Ya,ke,qa,St,Ei=`All these solutions work but they all have a drawback: you need to know the user
ID at build time (when you build the docker image). You usually want to run the
container in different environments and sometimes you want to use a different
user ID for each environment. For example:`,Ba,At,Wi=`<li><strong>For development</strong>: If you are using Ubuntu, your user ID is probably <code>1000</code>. When
you run the container locally you want to run it using that ID, so that you don’t
have any problems with permissions.</li> <li><strong>For CI</strong>: The servers you are using for continuous integration (for instance, GitHub runners)
might use an specif user. You could use some cache folders and maybe you need to
use the same user ID as the CI server.</li> <li><strong>For production</strong>: You could create a specific user for your application and use that
user ID.</li>`,Ka,Yt,Ni=`With the proposed solutions you would need to rebuild the docker image so that the
user ID inside the container is the same as the host user ID.`,Ga,he,Fi='<a class="heading-link" title="Permalink" aria-hidden="true" href="#create-the-user-at-runtime"><span>#</span></a>Create The User At Runtime',Va,qt,ji=`There is al alternative to the previous solutions that makes it possible to <strong>run the
container with different user IDs without rebuilding the image</strong>.`,Ja,fe,Qa,Bt,zi=`This is the approach we use in Torrust. You run the docker as <code>root</code> but we always
use an entrypoint. That entrypoint creates a new user with an ID provided as an
environment variable.`,Xa,Kt,Si=`The <code>entry.sh</code> script is always called when you run the container because it is
defined as an <code>ENTRYPOINT</code>. This “middleware” script creates the user if it does
not exist, and then runs the application using the <a href="https://github.com/ncopa/su-exec" rel="nofollow">su-exec</a>
program to change the user ID it is executed with.`,Za,Gt,Ai='<strong>For those who are interested here is our: <a href="https://github.com/torrust/torrust-tracker/blob/develop/share/container/entry_script_sh" rel="nofollow">entry script</a>.</strong>',eo,Vt,Yi="As you can read on the su-exec documentation:",to,me,so,Jt,qi=`The advantage of this approach is that you don’t have to worry about the user ID
when you build the docker image. You can run the container as root and then use
the entrypoint to create the user and run the application with that user.`,no,Qt,Bi=`The entrypoint also ensures that the application is executed with the correct
permissions. You cannot run the application as root unless you explicitly set
the environment variable <code>USER_ID</code> to <code>0</code>.`,ao,Xt,Ki=`If you want to contribute to Torrust we think that we could simplify the Containerfile
if the “su-exec” command were available in Rust. Because we could reuse one of the
Rust docker images we are using for other docker stages.`,oo,ge,Gi='<a class="heading-link" title="Permalink" aria-hidden="true" href="#decomposing-the-torrust-tracker-containerfile"><span>#</span></a>Decomposing the Torrust Tracker Containerfile',lo,Zt,Vi='Finally we can explain line by line what the <a href="https://github.com/torrust/torrust-tracker/blob/develop/Containerfile" rel="nofollow">Torrust Tracker Containerfile</a> does.',io,es,Ji=`Rust apps can be built in <code>debug</code> or <code>release</code> mode. The <code>Containerfile</code> builds both
modes and then it runs the tests for both modes. We have removed the <code>debug</code> mode
to keep the example short. But it is almost the same code. For the <code>release</code> mode
the flag <code>--release</code> is added to some commands.`,ro,ts,Qi="We can abstract away the stages:",po,we,co,ss,Xi="Let’s see each stage individually.",uo,ns,Zi="First, we have a base builder image where we install basic tools to build the application.",ko,be,ho,as,er=`There is nothing really strange here. We use the latest Debian “bookworm” at the time
of writing this article. And we also use <code>binstall</code> to install the binaries, since
both of these binaries are written in Rust.`,fo,os,tr=`The next stage is the base Tester Image. It only installs <code>cargo-nextest</code> to run the tests.
We also use the Debian “bookworm” but the <code>slim</code> variant, since we don’t need too much
to only run the tests.`,mo,ve,go,ls,sr=`The following is another stage used just to compile the small program <a href="https://github.com/ncopa/su-exec" rel="nofollow">su-exec</a> that we use to change the user ID when we run the container. The program is written
in C code, so we only need a C compiler.`,wo,ye,bo,is,nr=`From this point, we start building the application. First, we build the dependencies
and we cache them into an independent stage.`,vo,rs,ar=`The first stage is only to “build the recipe” which is the name that <code>cargo chef</code>
gives to the process of collecting all the information needed to build the application
dependencies.`,yo,$e,$o,ps,or=`Then, cargo dependencies are built using using the recipe created in the previous stage.
<code>cargo nextest</code> has a subcommand to generate and archive the artifact of the build.
We are using it to package and pass the application from one stage to another.`,xo,cs,lr=`Dependencies are archived but they are not used independently. That line just tests
that the dependencies could be archived.`,_o,xe,Co,us,ir=`In the following stage we build the application. The <code>cargo nextest archive</code> command builds
and archives the application.`,To,_e,Ro,ds,rr=`Now, that we have successfully built the application, we can run the tests. We
extract the application from the archived artifacts and run the tests.`,Mo,Ce,Lo,ks,pr=`Once the application has been built and tested we prepare the runtime. We start
from a minimum “distroless” image variant. We add an entrypoint to setup the application
and also to make sure we don’t use the <code>root</code> user to run it. The entrypoint just
runs the application provided as an argument, in our case, our application in <code>debug</code> or
<code>release</code> mode, depending of which one you want to run.`,Ho,Te,Po,hs,cr=`Finally, we add the <code>CMD</code> instruction so we can execute the application. The
entrypoint script only runs the application you pass as the first argument. This
stage is not merge into the previous because in the final version there are two
final runtimes: <code>debug</code> and <code>release</code>.`,Do,Re,Oo,Me,ur='<a class="heading-link" title="Permalink" aria-hidden="true" href="#other-good-practices"><span>#</span></a>Other Good Practices',Io,fs,dr="<li><strong>Minimalism</strong>: We strive to keep our Dockerfiles lean by only including essential components.</li> <li><strong>Explicit versions</strong>: At least with the minor version number, so you do not get unexpected broken compatibility but you can apply security and bug patches.</li> <li><strong>Regular Updates</strong>: Periodically updating the base image and dependencies to benefit from security patches and updates.</li> <li><strong>Health Checks</strong>: Implementing Docker health checks to monitor the state and health of our containerized application.</li>",Uo,Le,kr='<a class="heading-link" title="Permalink" aria-hidden="true" href="#other-considerations"><span>#</span></a>Other Considerations',Eo,ms,hr=`<li>Since we are using <code>su-exec</code> we need to run the containers as root. We have not
checked if this configuration works when you setup docker in <a href="https://docs.docker.com/engine/security/rootless/" rel="nofollow">Rootless mode</a>.</li> <li>Also, although we mostly mention docker in this article, the <code>Containerfile</code> works
with other tools to manage containers like <a href="https://podman.io/" rel="nofollow">Podman</a>.</li>`,Wo,He,fr='<a class="heading-link" title="Permalink" aria-hidden="true" href="#links"><span>#</span></a>Links',No,gs,mr="Simple tutorials:",Fo,ws,gr='<li><a href="https://tms-dev-blog.com/lean-docker-image-for-rust-backend/" rel="nofollow">Docker image for Rust backend: learn how to</a></li> <li><a href="https://collabnix.com/getting-started-with-rust-and-docker/" rel="nofollow">Getting Started with Rust and Docker</a> by <a href="https://collabnix.com/author/ajeetraina/" rel="nofollow">Ajeet Raina</a>.</li> <li><a href="https://tutorialedge.net/rust/rust-docker-tutorial/" rel="nofollow">Rust Docker Tutorial</a>.</li> <li><a href="https://docs.docker.com/language/rust/build-images/" rel="nofollow">Build your Rust image</a></li>',jo,bs,wr="Comprehensive articles like this:",zo,vs,br='<li><a href="https://dev.to/rogertorres/first-steps-with-docker-rust-30oi" rel="nofollow">First steps with Docker + Rust</a> by <a href="https://dev.to/rogertorres" rel="nofollow">Roger Torres</a>.</li>',So,ys,vr="Demos:",Ao,$s,yr='<li><a href="https://github.com/hseeberger/hello-rs" rel="nofollow">Simple dockerized Rust/Axum based HTTP server for demo purposes</a> by <a href="https://github.com/hseeberger" rel="nofollow">Heiko Seeberger</a>.</li>',Yo,xs,$r="Development using Docker:",qo,_s,xr='<li><a href="https://www.youtube.com/watch?v=kh1GMRFkzT4&amp;t=2s" rel="nofollow">Rust Development with Docker</a>.</li> <li><a href="https://docs.docker.com/language/rust/develop/" rel="nofollow">Develop your Rust application</a></li>',Bo,Cs,_r="Deployments using docker:",Ko,Ts,Cr='<li><a href="https://medium.com/@anirudhmurali/how-i-deployed-a-rust-web-app-using-the-rocket-framework-with-docker-424da99b1d8a" rel="nofollow">How I deployed a Rust web-app using the Rocket framework with Docker</a></li> <li><a href="https://www.koyeb.com/tutorials/deploy-a-rust-web-app-with-rocket" rel="nofollow">Deploy a Rust Web App With Rocket</a>.</li>',Go,Rs,Tr="Minimum sized container images:",Vo,Ms,Rr='<li><a href="https://github.com/johnthagen/min-sized-rust#containers" rel="nofollow">min-sized-rust</a> by <a href="https://github.com/johnthagen" rel="nofollow">johnthagen</a>.</li>',Jo,Ls,Mr="Caching dependencies:",Qo,Hs,Lr='<li><a href="https://blog.logrocket.com/packaging-a-rust-web-service-using-docker/" rel="nofollow">Packaging a Rust web service using Docker</a>.</li> <li><a href="https://dev.to/mgattozzi/plumbing-the-deps-of-the-crate-caching-rust-docker-builds-2e48" rel="nofollow">Plumbing the Deps of the Crate: Caching Rust Docker Builds</a>.</li> <li><a href="https://stackoverflow.com/questions/58473606/cache-rust-dependencies-with-docker-build" rel="nofollow">Cache Rust dependencies with Docker build</a>.</li>',Xo,Ps,Hr="Don’t run containers as root:",Zo,Ds,Pr='<li><a href="https://docs.docker.com/engine/install/linux-postinstall/#manage-docker-as-a-non-root-user" rel="nofollow">Manage Docker as a non-root user</a>.</li> <li><a href="https://docs.docker.com/engine/security/rootless/" rel="nofollow">Run the Docker daemon as a non-root user (Rootless mode)</a>.</li> <li><a href="https://docs.docker.com/engine/security/#docker-daemon-attack-surface" rel="nofollow">Docker daemon attack surface</a>.</li> <li><a href="https://www.howtogeek.com/devops/why-processes-in-docker-containers-shouldnt-run-as-root/" rel="nofollow">Why Processes In Docker Containers Shouldn’t Run as Root</a>.</li> <li><a href="https://www.clickittech.com/devops/docker-security-best-practices/" rel="nofollow">The Ultimate Docker Security Best Practices for Your Node.js Application</a>.</li> <li><a href="https://stackoverflow.com/questions/68155641/should-i-run-things-inside-a-docker-container-as-non-root-for-safety" rel="nofollow">Should I run things inside a docker container as non root for safety?</a>.</li> <li><a href="https://betterprogramming.pub/running-a-container-with-a-non-root-user-e35830d1f42a" rel="nofollow">Docker Tips: Running a Container With a Non Root User</a> by <a href="https://lucjuggery.medium.com/" rel="nofollow">Luc Juggery</a>.</li> <li><a href="https://github.com/containers/podman/blob/main/docs/tutorials/rootless_tutorial.md" rel="nofollow">Basic Setup and Use of Podman in a Rootless environment</a>.</li> <li><a href="https://medium.com/@mccode/understanding-how-uid-and-gid-work-in-docker-containers-c37a01d01cf" rel="nofollow">Understanding how uid and gid work in Docker containers</a>.</li>',el,Pe,Dr='<a class="heading-link" title="Permalink" aria-hidden="true" href="#conclusion"><span>#</span></a>Conclusion',tl,Os,Or="We hope you find this guide useful. Let us know what you think about it!",sl,Is,Ir=`We want this article to be a collective effort to document good practices about
Rust and Containers, so we would like to have reviews, comments, new sections, etcetera.`,nl,Us,Ur="If you see something wrong or you want to contribute by:",al,Es,Er="<li>Adding new sections.</li> <li>Fixing typos.</li> <li>Making it clearer.</li> <li>Adding links.</li> <li>Or whatever you think it could be interesting to have,</li>",ol,Ws,Wr='please open an <a href="https://github.com/torrust/torrust-website/issues" rel="nofollow">issue</a> or a <a href="https://github.com/torrust/torrust-website/pulls" rel="nofollow">PR</a>.',ll,Ns,Nr="If you have any questions or issues please open an issue on the corresponding repository:",il,Fs,Fr='<li>Torrust Tracker: <a href="https://github.com/torrust/torrust-tracker/issues" rel="nofollow">https://github.com/torrust/torrust-tracker/issues</a></li> <li>Torrust Index: <a href="https://github.com/torrust/torrust-index-backend/issues" rel="nofollow">https://github.com/torrust/torrust-index-backend/issues</a></li> <li>Torrust Website: <a href="https://github.com/torrust/torrust-index-frontend/issues" rel="nofollow">https://github.com/torrust/torrust-index-frontend/issues</a></li> <li>Containerizing Rust Applications Examples: <a href="https://github.com/torrust/containerizing-rust-apps-examples" rel="nofollow">https://github.com/torrust/containerizing-rust-apps-examples</a></li>',rl,js,jr='We very welcome any contributions to the projects or <a href="https://github.com/torrust/torrust-website/issues" rel="nofollow">this article</a>.',pl;return H=new R({props:{lang:"dockerfile",$$slots:{default:[Rp]},$$scope:{ctx:h}}}),I=new R({props:{lang:"dockerfile",$$slots:{default:[Mp]},$$scope:{ctx:h}}}),U=new R({props:{lang:"console",$$slots:{default:[Lp]},$$scope:{ctx:h}}}),E=new R({props:{lang:"console",$$slots:{default:[Hp]},$$scope:{ctx:h}}}),N=new R({props:{lang:"dockerfile",$$slots:{default:[Pp]},$$scope:{ctx:h}}}),F=new R({props:{lang:"console",$$slots:{default:[Dp]},$$scope:{ctx:h}}}),q=new cl({props:{type:"info",$$slots:{default:[Op]},$$scope:{ctx:h}}}),V=new R({props:{lang:"dockerfile",$$slots:{default:[Ip]},$$scope:{ctx:h}}}),Q=new R({props:{lang:"dockerfile",$$slots:{default:[Up]},$$scope:{ctx:h}}}),Z=new R({props:{lang:"dockerfile",$$slots:{default:[Ep]},$$scope:{ctx:h}}}),te=new R({props:{lang:"dockerfile",$$slots:{default:[Wp]},$$scope:{ctx:h}}}),se=new cl({props:{type:"info",$$slots:{default:[Np]},$$scope:{ctx:h}}}),ae=new R({props:{lang:"dockerfile",$$slots:{default:[Fp]},$$scope:{ctx:h}}}),oe=new R({props:{lang:"console",$$slots:{default:[jp]},$$scope:{ctx:h}}}),ie=new R({props:{lang:"dockerfile",$$slots:{default:[zp]},$$scope:{ctx:h}}}),re=new R({props:{lang:"console",$$slots:{default:[Sp]},$$scope:{ctx:h}}}),pe=new R({props:{lang:"dockerfile",$$slots:{default:[Ap]},$$scope:{ctx:h}}}),ce=new cl({props:{type:"info",$$slots:{default:[Yp]},$$scope:{ctx:h}}}),de=new R({props:{lang:"console",$$slots:{default:[qp]},$$scope:{ctx:h}}}),ke=new R({props:{lang:"console",$$slots:{default:[Bp]},$$scope:{ctx:h}}}),fe=new R({props:{lang:"dockerfile",$$slots:{default:[Kp]},$$scope:{ctx:h}}}),me=new cl({props:{type:"info",$$slots:{default:[Gp]},$$scope:{ctx:h}}}),we=new R({props:{lang:"dockerfile",$$slots:{default:[Vp]},$$scope:{ctx:h}}}),be=new R({props:{lang:"dockerfile",$$slots:{default:[Jp]},$$scope:{ctx:h}}}),ve=new R({props:{lang:"dockerfile",$$slots:{default:[Qp]},$$scope:{ctx:h}}}),ye=new R({props:{lang:"dockerfile",$$slots:{default:[Xp]},$$scope:{ctx:h}}}),$e=new R({props:{lang:"dockerfile",$$slots:{default:[Zp]},$$scope:{ctx:h}}}),xe=new R({props:{lang:"dockerfile",$$slots:{default:[ec]},$$scope:{ctx:h}}}),_e=new R({props:{lang:"dockerfile",$$slots:{default:[tc]},$$scope:{ctx:h}}}),Ce=new R({props:{lang:"dockerfile",$$slots:{default:[sc]},$$scope:{ctx:h}}}),Te=new R({props:{lang:"dockerfile",$$slots:{default:[nc]},$$scope:{ctx:h}}}),Re=new R({props:{lang:"dockerfile",$$slots:{default:[ac]},$$scope:{ctx:h}}}),{c(){a=l("h2"),a.innerHTML=u,k=r(),o=l("p"),o.textContent=c,$=r(),M=l("p"),M.textContent=zs,qs=r(),De=l("p"),De.innerHTML=ul,Bs=r(),Oe=l("ul"),Oe.innerHTML=dl,Ks=r(),L=l("h3"),L.innerHTML=kl,Gs=r(),Ie=l("p"),Ie.innerHTML=hl,Vs=r(),Ue=l("blockquote"),Ue.innerHTML=fl,Js=r(),m(H.$$.fragment),Qs=r(),Ee=l("p"),Ee.innerHTML=ml,Xs=r(),We=l("p"),We.textContent=gl,Zs=r(),P=l("h2"),P.innerHTML=wl,en=r(),Ne=l("p"),Ne.textContent=bl,tn=r(),Fe=l("ul"),Fe.innerHTML=vl,sn=r(),D=l("h2"),D.innerHTML=yl,nn=r(),je=l("p"),je.innerHTML=$l,an=r(),ze=l("p"),ze.textContent=xl,on=r(),Se=l("p"),Se.innerHTML=_l,ln=r(),O=l("h2"),O.innerHTML=Cl,rn=r(),Ae=l("p"),Ae.textContent=Tl,pn=r(),m(I.$$.fragment),cn=r(),Ye=l("p"),Ye.textContent=Rl,un=r(),m(U.$$.fragment),dn=r(),qe=l("p"),qe.innerHTML=Ml,kn=r(),m(E.$$.fragment),hn=r(),Be=l("p"),Be.textContent=Ll,fn=r(),W=l("h2"),W.innerHTML=Hl,mn=r(),Ke=l("p"),Ke.textContent=Pl,gn=r(),Ge=l("p"),Ge.textContent=Dl,wn=r(),m(N.$$.fragment),bn=r(),Ve=l("p"),Ve.textContent=Ol,vn=r(),m(F.$$.fragment),yn=r(),Je=l("p"),Je.textContent=Il,$n=r(),j=l("h2"),j.innerHTML=Ul,xn=r(),Qe=l("p"),Qe.innerHTML=El,_n=r(),z=l("h3"),z.innerHTML=Wl,Cn=r(),Xe=l("pre"),Tn=new _(!1),Rn=r(),Ze=l("p"),Ze.innerHTML=Nl,Mn=r(),S=l("h3"),S.innerHTML=Fl,Ln=r(),et=l("pre"),Hn=new _(!1),Pn=r(),tt=l("p"),tt.innerHTML=jl,Dn=r(),A=l("h3"),A.innerHTML=zl,On=r(),st=l("pre"),In=new _(!1),Un=r(),nt=l("p"),nt.innerHTML=Sl,En=r(),Y=l("h3"),Y.innerHTML=Al,Wn=r(),at=l("pre"),Nn=new _(!1),Fn=r(),ot=l("p"),ot.innerHTML=Yl,jn=r(),lt=l("ul"),lt.innerHTML=ql,zn=r(),m(q.$$.fragment),Sn=r(),B=l("h2"),B.innerHTML=Bl,An=r(),it=l("p"),it.textContent=Kl,Yn=r(),rt=l("p"),rt.textContent=Gl,qn=r(),K=l("h2"),K.innerHTML=Vl,Bn=r(),pt=l("p"),pt.textContent=Jl,Kn=r(),ct=l("p"),ct.textContent=Ql,Gn=r(),ut=l("p"),ut.textContent=Xl,Vn=r(),dt=l("p"),dt.textContent=Zl,Jn=r(),kt=l("ul"),kt.innerHTML=ei,Qn=r(),G=l("h3"),G.innerHTML=ti,Xn=r(),ht=l("p"),ht.textContent=si,Zn=r(),ft=l("p"),ft.innerHTML=ni,ea=r(),mt=l("p"),mt.textContent=ai,ta=r(),m(V.$$.fragment),sa=r(),gt=l("p"),gt.innerHTML=oi,na=r(),J=l("h3"),J.innerHTML=li,aa=r(),wt=l("p"),wt.innerHTML=ii,oa=r(),m(Q.$$.fragment),la=r(),bt=l("p"),bt.innerHTML=ri,ia=r(),X=l("h2"),X.innerHTML=pi,ra=r(),vt=l("p"),vt.innerHTML=ci,pa=r(),yt=l("p"),yt.innerHTML=ui,ca=r(),$t=l("p"),$t.innerHTML=di,ua=r(),m(Z.$$.fragment),da=r(),ee=l("h2"),ee.innerHTML=ki,ka=r(),xt=l("p"),xt.innerHTML=hi,ha=r(),_t=l("p"),_t.innerHTML=fi,fa=r(),Ct=l("p"),Ct.innerHTML=mi,ma=r(),Tt=l("ul"),Tt.innerHTML=gi,ga=r(),Rt=l("p"),Rt.textContent=wi,wa=r(),Mt=l("ul"),Mt.innerHTML=bi,ba=r(),m(te.$$.fragment),va=r(),m(se.$$.fragment),ya=r(),ne=l("h2"),ne.innerHTML=vi,$a=r(),Lt=l("p"),Lt.innerHTML=yi,xa=r(),m(ae.$$.fragment),_a=r(),Ht=l("p"),Ht.textContent=$i,Ca=r(),m(oe.$$.fragment),Ta=r(),Pt=l("p"),Pt.innerHTML=xi,Ra=r(),Dt=l("p"),Dt.innerHTML=_i,Ma=r(),Ot=l("ol"),Ot.innerHTML=Ci,La=r(),It=l("p"),It.innerHTML=Ti,Ha=r(),le=l("h3"),le.innerHTML=Ri,Pa=r(),m(ie.$$.fragment),Da=r(),Ut=l("p"),Ut.innerHTML=Mi,Oa=r(),m(re.$$.fragment),Ia=r(),Et=l("p"),Et.textContent=Li,Ua=r(),m(pe.$$.fragment),Ea=r(),Wt=l("p"),Wt.innerHTML=Hi,Wa=r(),m(ce.$$.fragment),Na=r(),Nt=l("p"),Nt.innerHTML=Pi,Fa=r(),ue=l("h3"),ue.innerHTML=Di,ja=r(),Ft=l("p"),Ft.innerHTML=Oi,za=r(),m(de.$$.fragment),Sa=r(),jt=l("p"),jt.innerHTML=Ii,Aa=r(),zt=l("p"),zt.textContent=Ui,Ya=r(),m(ke.$$.fragment),qa=r(),St=l("p"),St.textContent=Ei,Ba=r(),At=l("ul"),At.innerHTML=Wi,Ka=r(),Yt=l("p"),Yt.textContent=Ni,Ga=r(),he=l("h3"),he.innerHTML=Fi,Va=r(),qt=l("p"),qt.innerHTML=ji,Ja=r(),m(fe.$$.fragment),Qa=r(),Bt=l("p"),Bt.innerHTML=zi,Xa=r(),Kt=l("p"),Kt.innerHTML=Si,Za=r(),Gt=l("p"),Gt.innerHTML=Ai,eo=r(),Vt=l("p"),Vt.textContent=Yi,to=r(),m(me.$$.fragment),so=r(),Jt=l("p"),Jt.textContent=qi,no=r(),Qt=l("p"),Qt.innerHTML=Bi,ao=r(),Xt=l("p"),Xt.textContent=Ki,oo=r(),ge=l("h2"),ge.innerHTML=Gi,lo=r(),Zt=l("p"),Zt.innerHTML=Vi,io=r(),es=l("p"),es.innerHTML=Ji,ro=r(),ts=l("p"),ts.textContent=Qi,po=r(),m(we.$$.fragment),co=r(),ss=l("p"),ss.textContent=Xi,uo=r(),ns=l("p"),ns.textContent=Zi,ko=r(),m(be.$$.fragment),ho=r(),as=l("p"),as.innerHTML=er,fo=r(),os=l("p"),os.innerHTML=tr,mo=r(),m(ve.$$.fragment),go=r(),ls=l("p"),ls.innerHTML=sr,wo=r(),m(ye.$$.fragment),bo=r(),is=l("p"),is.textContent=nr,vo=r(),rs=l("p"),rs.innerHTML=ar,yo=r(),m($e.$$.fragment),$o=r(),ps=l("p"),ps.innerHTML=or,xo=r(),cs=l("p"),cs.textContent=lr,_o=r(),m(xe.$$.fragment),Co=r(),us=l("p"),us.innerHTML=ir,To=r(),m(_e.$$.fragment),Ro=r(),ds=l("p"),ds.textContent=rr,Mo=r(),m(Ce.$$.fragment),Lo=r(),ks=l("p"),ks.innerHTML=pr,Ho=r(),m(Te.$$.fragment),Po=r(),hs=l("p"),hs.innerHTML=cr,Do=r(),m(Re.$$.fragment),Oo=r(),Me=l("h2"),Me.innerHTML=ur,Io=r(),fs=l("ul"),fs.innerHTML=dr,Uo=r(),Le=l("h2"),Le.innerHTML=kr,Eo=r(),ms=l("ul"),ms.innerHTML=hr,Wo=r(),He=l("h2"),He.innerHTML=fr,No=r(),gs=l("p"),gs.textContent=mr,Fo=r(),ws=l("ul"),ws.innerHTML=gr,jo=r(),bs=l("p"),bs.textContent=wr,zo=r(),vs=l("ul"),vs.innerHTML=br,So=r(),ys=l("p"),ys.textContent=vr,Ao=r(),$s=l("ul"),$s.innerHTML=yr,Yo=r(),xs=l("p"),xs.textContent=$r,qo=r(),_s=l("ul"),_s.innerHTML=xr,Bo=r(),Cs=l("p"),Cs.textContent=_r,Ko=r(),Ts=l("ul"),Ts.innerHTML=Cr,Go=r(),Rs=l("p"),Rs.textContent=Tr,Vo=r(),Ms=l("ul"),Ms.innerHTML=Rr,Jo=r(),Ls=l("p"),Ls.textContent=Mr,Qo=r(),Hs=l("ul"),Hs.innerHTML=Lr,Xo=r(),Ps=l("p"),Ps.textContent=Hr,Zo=r(),Ds=l("ul"),Ds.innerHTML=Pr,el=r(),Pe=l("h2"),Pe.innerHTML=Dr,tl=r(),Os=l("p"),Os.textContent=Or,sl=r(),Is=l("p"),Is.textContent=Ir,nl=r(),Us=l("p"),Us.textContent=Ur,al=r(),Es=l("ul"),Es.innerHTML=Er,ol=r(),Ws=l("p"),Ws.innerHTML=Wr,ll=r(),Ns=l("p"),Ns.textContent=Nr,il=r(),Fs=l("ul"),Fs.innerHTML=Fr,rl=r(),js=l("p"),js.innerHTML=jr,this.h()},l(e){a=i(e,"H2",{id:!0,"data-svelte-h":!0}),d(a)!=="svelte-1ahwhrx"&&(a.innerHTML=u),k=p(e),o=i(e,"P",{"data-svelte-h":!0}),d(o)!=="svelte-1bew33"&&(o.textContent=c),$=p(e),M=i(e,"P",{"data-svelte-h":!0}),d(M)!=="svelte-n4c01r"&&(M.textContent=zs),qs=p(e),De=i(e,"P",{"data-svelte-h":!0}),d(De)!=="svelte-2fok2a"&&(De.innerHTML=ul),Bs=p(e),Oe=i(e,"UL",{"data-svelte-h":!0}),d(Oe)!=="svelte-pc1ly4"&&(Oe.innerHTML=dl),Ks=p(e),L=i(e,"H3",{id:!0,"data-svelte-h":!0}),d(L)!=="svelte-ywa4f"&&(L.innerHTML=kl),Gs=p(e),Ie=i(e,"P",{"data-svelte-h":!0}),d(Ie)!=="svelte-bjlfzg"&&(Ie.innerHTML=hl),Vs=p(e),Ue=i(e,"BLOCKQUOTE",{"data-svelte-h":!0}),d(Ue)!=="svelte-3fqojs"&&(Ue.innerHTML=fl),Js=p(e),g(H.$$.fragment,e),Qs=p(e),Ee=i(e,"P",{"data-svelte-h":!0}),d(Ee)!=="svelte-h87xgr"&&(Ee.innerHTML=ml),Xs=p(e),We=i(e,"P",{"data-svelte-h":!0}),d(We)!=="svelte-1jzeibq"&&(We.textContent=gl),Zs=p(e),P=i(e,"H2",{id:!0,"data-svelte-h":!0}),d(P)!=="svelte-d9t7ph"&&(P.innerHTML=wl),en=p(e),Ne=i(e,"P",{"data-svelte-h":!0}),d(Ne)!=="svelte-geafvi"&&(Ne.textContent=bl),tn=p(e),Fe=i(e,"UL",{"data-svelte-h":!0}),d(Fe)!=="svelte-c5a7l"&&(Fe.innerHTML=vl),sn=p(e),D=i(e,"H2",{id:!0,"data-svelte-h":!0}),d(D)!=="svelte-cyt294"&&(D.innerHTML=yl),nn=p(e),je=i(e,"P",{"data-svelte-h":!0}),d(je)!=="svelte-ayeng7"&&(je.innerHTML=$l),an=p(e),ze=i(e,"P",{"data-svelte-h":!0}),d(ze)!=="svelte-a0u1en"&&(ze.textContent=xl),on=p(e),Se=i(e,"P",{"data-svelte-h":!0}),d(Se)!=="svelte-15sjdzn"&&(Se.innerHTML=_l),ln=p(e),O=i(e,"H2",{id:!0,"data-svelte-h":!0}),d(O)!=="svelte-vhcbi5"&&(O.innerHTML=Cl),rn=p(e),Ae=i(e,"P",{"data-svelte-h":!0}),d(Ae)!=="svelte-a641je"&&(Ae.textContent=Tl),pn=p(e),g(I.$$.fragment,e),cn=p(e),Ye=i(e,"P",{"data-svelte-h":!0}),d(Ye)!=="svelte-1shwlxj"&&(Ye.textContent=Rl),un=p(e),g(U.$$.fragment,e),dn=p(e),qe=i(e,"P",{"data-svelte-h":!0}),d(qe)!=="svelte-1148wxx"&&(qe.innerHTML=Ml),kn=p(e),g(E.$$.fragment,e),hn=p(e),Be=i(e,"P",{"data-svelte-h":!0}),d(Be)!=="svelte-msyssk"&&(Be.textContent=Ll),fn=p(e),W=i(e,"H2",{id:!0,"data-svelte-h":!0}),d(W)!=="svelte-1rb4gy9"&&(W.innerHTML=Hl),mn=p(e),Ke=i(e,"P",{"data-svelte-h":!0}),d(Ke)!=="svelte-1wu17ac"&&(Ke.textContent=Pl),gn=p(e),Ge=i(e,"P",{"data-svelte-h":!0}),d(Ge)!=="svelte-1q5coka"&&(Ge.textContent=Dl),wn=p(e),g(N.$$.fragment,e),bn=p(e),Ve=i(e,"P",{"data-svelte-h":!0}),d(Ve)!=="svelte-1e77e1j"&&(Ve.textContent=Ol),vn=p(e),g(F.$$.fragment,e),yn=p(e),Je=i(e,"P",{"data-svelte-h":!0}),d(Je)!=="svelte-j0pust"&&(Je.textContent=Il),$n=p(e),j=i(e,"H2",{id:!0,"data-svelte-h":!0}),d(j)!=="svelte-1d98m8q"&&(j.innerHTML=Ul),xn=p(e),Qe=i(e,"P",{"data-svelte-h":!0}),d(Qe)!=="svelte-oq7eo4"&&(Qe.innerHTML=El),_n=p(e),z=i(e,"H3",{id:!0,"data-svelte-h":!0}),d(z)!=="svelte-wzlgx5"&&(z.innerHTML=Wl),Cn=p(e),Xe=i(e,"PRE",{class:!0});var t=C(Xe);Tn=T(t,!1),t.forEach(s),Rn=p(e),Ze=i(e,"P",{"data-svelte-h":!0}),d(Ze)!=="svelte-44km0g"&&(Ze.innerHTML=Nl),Mn=p(e),S=i(e,"H3",{id:!0,"data-svelte-h":!0}),d(S)!=="svelte-1yonnqd"&&(S.innerHTML=Fl),Ln=p(e),et=i(e,"PRE",{class:!0});var Ss=C(et);Hn=T(Ss,!1),Ss.forEach(s),Pn=p(e),tt=i(e,"P",{"data-svelte-h":!0}),d(tt)!=="svelte-3abwef"&&(tt.innerHTML=jl),Dn=p(e),A=i(e,"H3",{id:!0,"data-svelte-h":!0}),d(A)!=="svelte-dufdni"&&(A.innerHTML=zl),On=p(e),st=i(e,"PRE",{class:!0});var As=C(st);In=T(As,!1),As.forEach(s),Un=p(e),nt=i(e,"P",{"data-svelte-h":!0}),d(nt)!=="svelte-tmyft9"&&(nt.innerHTML=Sl),En=p(e),Y=i(e,"H3",{id:!0,"data-svelte-h":!0}),d(Y)!=="svelte-184w9i9"&&(Y.innerHTML=Al),Wn=p(e),at=i(e,"PRE",{class:!0});var Ys=C(at);Nn=T(Ys,!1),Ys.forEach(s),Fn=p(e),ot=i(e,"P",{"data-svelte-h":!0}),d(ot)!=="svelte-1fhk2ic"&&(ot.innerHTML=Yl),jn=p(e),lt=i(e,"UL",{"data-svelte-h":!0}),d(lt)!=="svelte-18873bu"&&(lt.innerHTML=ql),zn=p(e),g(q.$$.fragment,e),Sn=p(e),B=i(e,"H2",{id:!0,"data-svelte-h":!0}),d(B)!=="svelte-uva52c"&&(B.innerHTML=Bl),An=p(e),it=i(e,"P",{"data-svelte-h":!0}),d(it)!=="svelte-hk85vl"&&(it.textContent=Kl),Yn=p(e),rt=i(e,"P",{"data-svelte-h":!0}),d(rt)!=="svelte-1xtjzwc"&&(rt.textContent=Gl),qn=p(e),K=i(e,"H2",{id:!0,"data-svelte-h":!0}),d(K)!=="svelte-1ypa8uz"&&(K.innerHTML=Vl),Bn=p(e),pt=i(e,"P",{"data-svelte-h":!0}),d(pt)!=="svelte-11u1mbr"&&(pt.textContent=Jl),Kn=p(e),ct=i(e,"P",{"data-svelte-h":!0}),d(ct)!=="svelte-uz9oxy"&&(ct.textContent=Ql),Gn=p(e),ut=i(e,"P",{"data-svelte-h":!0}),d(ut)!=="svelte-8zab98"&&(ut.textContent=Xl),Vn=p(e),dt=i(e,"P",{"data-svelte-h":!0}),d(dt)!=="svelte-1sajbeb"&&(dt.textContent=Zl),Jn=p(e),kt=i(e,"UL",{"data-svelte-h":!0}),d(kt)!=="svelte-75d099"&&(kt.innerHTML=ei),Qn=p(e),G=i(e,"H3",{id:!0,"data-svelte-h":!0}),d(G)!=="svelte-1xct4pc"&&(G.innerHTML=ti),Xn=p(e),ht=i(e,"P",{"data-svelte-h":!0}),d(ht)!=="svelte-2cwd33"&&(ht.textContent=si),Zn=p(e),ft=i(e,"P",{"data-svelte-h":!0}),d(ft)!=="svelte-1l59dpd"&&(ft.innerHTML=ni),ea=p(e),mt=i(e,"P",{"data-svelte-h":!0}),d(mt)!=="svelte-xzh6g5"&&(mt.textContent=ai),ta=p(e),g(V.$$.fragment,e),sa=p(e),gt=i(e,"P",{"data-svelte-h":!0}),d(gt)!=="svelte-1al3v1i"&&(gt.innerHTML=oi),na=p(e),J=i(e,"H3",{id:!0,"data-svelte-h":!0}),d(J)!=="svelte-u2le63"&&(J.innerHTML=li),aa=p(e),wt=i(e,"P",{"data-svelte-h":!0}),d(wt)!=="svelte-k3wwdj"&&(wt.innerHTML=ii),oa=p(e),g(Q.$$.fragment,e),la=p(e),bt=i(e,"P",{"data-svelte-h":!0}),d(bt)!=="svelte-kdyrix"&&(bt.innerHTML=ri),ia=p(e),X=i(e,"H2",{id:!0,"data-svelte-h":!0}),d(X)!=="svelte-pxmn10"&&(X.innerHTML=pi),ra=p(e),vt=i(e,"P",{"data-svelte-h":!0}),d(vt)!=="svelte-6yum3m"&&(vt.innerHTML=ci),pa=p(e),yt=i(e,"P",{"data-svelte-h":!0}),d(yt)!=="svelte-gk98nu"&&(yt.innerHTML=ui),ca=p(e),$t=i(e,"P",{"data-svelte-h":!0}),d($t)!=="svelte-1n8zo3n"&&($t.innerHTML=di),ua=p(e),g(Z.$$.fragment,e),da=p(e),ee=i(e,"H2",{id:!0,"data-svelte-h":!0}),d(ee)!=="svelte-1qtt8xq"&&(ee.innerHTML=ki),ka=p(e),xt=i(e,"P",{"data-svelte-h":!0}),d(xt)!=="svelte-cx78zz"&&(xt.innerHTML=hi),ha=p(e),_t=i(e,"P",{"data-svelte-h":!0}),d(_t)!=="svelte-po63xx"&&(_t.innerHTML=fi),fa=p(e),Ct=i(e,"P",{"data-svelte-h":!0}),d(Ct)!=="svelte-16yp2dv"&&(Ct.innerHTML=mi),ma=p(e),Tt=i(e,"UL",{"data-svelte-h":!0}),d(Tt)!=="svelte-15gh482"&&(Tt.innerHTML=gi),ga=p(e),Rt=i(e,"P",{"data-svelte-h":!0}),d(Rt)!=="svelte-fa7gqx"&&(Rt.textContent=wi),wa=p(e),Mt=i(e,"UL",{"data-svelte-h":!0}),d(Mt)!=="svelte-1hjbvmo"&&(Mt.innerHTML=bi),ba=p(e),g(te.$$.fragment,e),va=p(e),g(se.$$.fragment,e),ya=p(e),ne=i(e,"H2",{id:!0,"data-svelte-h":!0}),d(ne)!=="svelte-v5pqya"&&(ne.innerHTML=vi),$a=p(e),Lt=i(e,"P",{"data-svelte-h":!0}),d(Lt)!=="svelte-1pa1gb9"&&(Lt.innerHTML=yi),xa=p(e),g(ae.$$.fragment,e),_a=p(e),Ht=i(e,"P",{"data-svelte-h":!0}),d(Ht)!=="svelte-1lg13w3"&&(Ht.textContent=$i),Ca=p(e),g(oe.$$.fragment,e),Ta=p(e),Pt=i(e,"P",{"data-svelte-h":!0}),d(Pt)!=="svelte-1xp5ccj"&&(Pt.innerHTML=xi),Ra=p(e),Dt=i(e,"P",{"data-svelte-h":!0}),d(Dt)!=="svelte-19l2oa0"&&(Dt.innerHTML=_i),Ma=p(e),Ot=i(e,"OL",{"data-svelte-h":!0}),d(Ot)!=="svelte-56q2gj"&&(Ot.innerHTML=Ci),La=p(e),It=i(e,"P",{"data-svelte-h":!0}),d(It)!=="svelte-16n7gvb"&&(It.innerHTML=Ti),Ha=p(e),le=i(e,"H3",{id:!0,"data-svelte-h":!0}),d(le)!=="svelte-1kd4y7f"&&(le.innerHTML=Ri),Pa=p(e),g(ie.$$.fragment,e),Da=p(e),Ut=i(e,"P",{"data-svelte-h":!0}),d(Ut)!=="svelte-ifo8u1"&&(Ut.innerHTML=Mi),Oa=p(e),g(re.$$.fragment,e),Ia=p(e),Et=i(e,"P",{"data-svelte-h":!0}),d(Et)!=="svelte-163jsvx"&&(Et.textContent=Li),Ua=p(e),g(pe.$$.fragment,e),Ea=p(e),Wt=i(e,"P",{"data-svelte-h":!0}),d(Wt)!=="svelte-1urcnog"&&(Wt.innerHTML=Hi),Wa=p(e),g(ce.$$.fragment,e),Na=p(e),Nt=i(e,"P",{"data-svelte-h":!0}),d(Nt)!=="svelte-1ne3nlk"&&(Nt.innerHTML=Pi),Fa=p(e),ue=i(e,"H3",{id:!0,"data-svelte-h":!0}),d(ue)!=="svelte-7ojjtb"&&(ue.innerHTML=Di),ja=p(e),Ft=i(e,"P",{"data-svelte-h":!0}),d(Ft)!=="svelte-1gvovnw"&&(Ft.innerHTML=Oi),za=p(e),g(de.$$.fragment,e),Sa=p(e),jt=i(e,"P",{"data-svelte-h":!0}),d(jt)!=="svelte-1eslp6d"&&(jt.innerHTML=Ii),Aa=p(e),zt=i(e,"P",{"data-svelte-h":!0}),d(zt)!=="svelte-3tgesj"&&(zt.textContent=Ui),Ya=p(e),g(ke.$$.fragment,e),qa=p(e),St=i(e,"P",{"data-svelte-h":!0}),d(St)!=="svelte-1pa66tj"&&(St.textContent=Ei),Ba=p(e),At=i(e,"UL",{"data-svelte-h":!0}),d(At)!=="svelte-16bqamd"&&(At.innerHTML=Wi),Ka=p(e),Yt=i(e,"P",{"data-svelte-h":!0}),d(Yt)!=="svelte-187e9h7"&&(Yt.textContent=Ni),Ga=p(e),he=i(e,"H3",{id:!0,"data-svelte-h":!0}),d(he)!=="svelte-273n8g"&&(he.innerHTML=Fi),Va=p(e),qt=i(e,"P",{"data-svelte-h":!0}),d(qt)!=="svelte-q9n163"&&(qt.innerHTML=ji),Ja=p(e),g(fe.$$.fragment,e),Qa=p(e),Bt=i(e,"P",{"data-svelte-h":!0}),d(Bt)!=="svelte-1eodbad"&&(Bt.innerHTML=zi),Xa=p(e),Kt=i(e,"P",{"data-svelte-h":!0}),d(Kt)!=="svelte-1v8jphd"&&(Kt.innerHTML=Si),Za=p(e),Gt=i(e,"P",{"data-svelte-h":!0}),d(Gt)!=="svelte-1wsqwjd"&&(Gt.innerHTML=Ai),eo=p(e),Vt=i(e,"P",{"data-svelte-h":!0}),d(Vt)!=="svelte-x7o0dz"&&(Vt.textContent=Yi),to=p(e),g(me.$$.fragment,e),so=p(e),Jt=i(e,"P",{"data-svelte-h":!0}),d(Jt)!=="svelte-1shdd3c"&&(Jt.textContent=qi),no=p(e),Qt=i(e,"P",{"data-svelte-h":!0}),d(Qt)!=="svelte-9qnch7"&&(Qt.innerHTML=Bi),ao=p(e),Xt=i(e,"P",{"data-svelte-h":!0}),d(Xt)!=="svelte-4o8v7"&&(Xt.textContent=Ki),oo=p(e),ge=i(e,"H2",{id:!0,"data-svelte-h":!0}),d(ge)!=="svelte-1qu4fyq"&&(ge.innerHTML=Gi),lo=p(e),Zt=i(e,"P",{"data-svelte-h":!0}),d(Zt)!=="svelte-1flhjok"&&(Zt.innerHTML=Vi),io=p(e),es=i(e,"P",{"data-svelte-h":!0}),d(es)!=="svelte-1lylxvu"&&(es.innerHTML=Ji),ro=p(e),ts=i(e,"P",{"data-svelte-h":!0}),d(ts)!=="svelte-14mcm6e"&&(ts.textContent=Qi),po=p(e),g(we.$$.fragment,e),co=p(e),ss=i(e,"P",{"data-svelte-h":!0}),d(ss)!=="svelte-4l2mid"&&(ss.textContent=Xi),uo=p(e),ns=i(e,"P",{"data-svelte-h":!0}),d(ns)!=="svelte-wr5nrh"&&(ns.textContent=Zi),ko=p(e),g(be.$$.fragment,e),ho=p(e),as=i(e,"P",{"data-svelte-h":!0}),d(as)!=="svelte-pglm9y"&&(as.innerHTML=er),fo=p(e),os=i(e,"P",{"data-svelte-h":!0}),d(os)!=="svelte-hitqor"&&(os.innerHTML=tr),mo=p(e),g(ve.$$.fragment,e),go=p(e),ls=i(e,"P",{"data-svelte-h":!0}),d(ls)!=="svelte-ce2qns"&&(ls.innerHTML=sr),wo=p(e),g(ye.$$.fragment,e),bo=p(e),is=i(e,"P",{"data-svelte-h":!0}),d(is)!=="svelte-1qimsxt"&&(is.textContent=nr),vo=p(e),rs=i(e,"P",{"data-svelte-h":!0}),d(rs)!=="svelte-q7ly23"&&(rs.innerHTML=ar),yo=p(e),g($e.$$.fragment,e),$o=p(e),ps=i(e,"P",{"data-svelte-h":!0}),d(ps)!=="svelte-11c4qtl"&&(ps.innerHTML=or),xo=p(e),cs=i(e,"P",{"data-svelte-h":!0}),d(cs)!=="svelte-i61gzi"&&(cs.textContent=lr),_o=p(e),g(xe.$$.fragment,e),Co=p(e),us=i(e,"P",{"data-svelte-h":!0}),d(us)!=="svelte-fhpivi"&&(us.innerHTML=ir),To=p(e),g(_e.$$.fragment,e),Ro=p(e),ds=i(e,"P",{"data-svelte-h":!0}),d(ds)!=="svelte-blek30"&&(ds.textContent=rr),Mo=p(e),g(Ce.$$.fragment,e),Lo=p(e),ks=i(e,"P",{"data-svelte-h":!0}),d(ks)!=="svelte-1a43lxq"&&(ks.innerHTML=pr),Ho=p(e),g(Te.$$.fragment,e),Po=p(e),hs=i(e,"P",{"data-svelte-h":!0}),d(hs)!=="svelte-1ae8cp4"&&(hs.innerHTML=cr),Do=p(e),g(Re.$$.fragment,e),Oo=p(e),Me=i(e,"H2",{id:!0,"data-svelte-h":!0}),d(Me)!=="svelte-12ziiyq"&&(Me.innerHTML=ur),Io=p(e),fs=i(e,"UL",{"data-svelte-h":!0}),d(fs)!=="svelte-pbuqhm"&&(fs.innerHTML=dr),Uo=p(e),Le=i(e,"H2",{id:!0,"data-svelte-h":!0}),d(Le)!=="svelte-12m3v1c"&&(Le.innerHTML=kr),Eo=p(e),ms=i(e,"UL",{"data-svelte-h":!0}),d(ms)!=="svelte-1bvek77"&&(ms.innerHTML=hr),Wo=p(e),He=i(e,"H2",{id:!0,"data-svelte-h":!0}),d(He)!=="svelte-32dd6s"&&(He.innerHTML=fr),No=p(e),gs=i(e,"P",{"data-svelte-h":!0}),d(gs)!=="svelte-4pkash"&&(gs.textContent=mr),Fo=p(e),ws=i(e,"UL",{"data-svelte-h":!0}),d(ws)!=="svelte-5j93uy"&&(ws.innerHTML=gr),jo=p(e),bs=i(e,"P",{"data-svelte-h":!0}),d(bs)!=="svelte-bk14i0"&&(bs.textContent=wr),zo=p(e),vs=i(e,"UL",{"data-svelte-h":!0}),d(vs)!=="svelte-19n6tki"&&(vs.innerHTML=br),So=p(e),ys=i(e,"P",{"data-svelte-h":!0}),d(ys)!=="svelte-rz7o02"&&(ys.textContent=vr),Ao=p(e),$s=i(e,"UL",{"data-svelte-h":!0}),d($s)!=="svelte-w3dy1g"&&($s.innerHTML=yr),Yo=p(e),xs=i(e,"P",{"data-svelte-h":!0}),d(xs)!=="svelte-dl4iv3"&&(xs.textContent=$r),qo=p(e),_s=i(e,"UL",{"data-svelte-h":!0}),d(_s)!=="svelte-zmfpgi"&&(_s.innerHTML=xr),Bo=p(e),Cs=i(e,"P",{"data-svelte-h":!0}),d(Cs)!=="svelte-uc1ydm"&&(Cs.textContent=_r),Ko=p(e),Ts=i(e,"UL",{"data-svelte-h":!0}),d(Ts)!=="svelte-jf89i3"&&(Ts.innerHTML=Cr),Go=p(e),Rs=i(e,"P",{"data-svelte-h":!0}),d(Rs)!=="svelte-17ghd7g"&&(Rs.textContent=Tr),Vo=p(e),Ms=i(e,"UL",{"data-svelte-h":!0}),d(Ms)!=="svelte-6p9xs0"&&(Ms.innerHTML=Rr),Jo=p(e),Ls=i(e,"P",{"data-svelte-h":!0}),d(Ls)!=="svelte-ym3too"&&(Ls.textContent=Mr),Qo=p(e),Hs=i(e,"UL",{"data-svelte-h":!0}),d(Hs)!=="svelte-1r5cmoj"&&(Hs.innerHTML=Lr),Xo=p(e),Ps=i(e,"P",{"data-svelte-h":!0}),d(Ps)!=="svelte-c87p6b"&&(Ps.textContent=Hr),Zo=p(e),Ds=i(e,"UL",{"data-svelte-h":!0}),d(Ds)!=="svelte-1tvfsrk"&&(Ds.innerHTML=Pr),el=p(e),Pe=i(e,"H2",{id:!0,"data-svelte-h":!0}),d(Pe)!=="svelte-br5ox0"&&(Pe.innerHTML=Dr),tl=p(e),Os=i(e,"P",{"data-svelte-h":!0}),d(Os)!=="svelte-1e29q46"&&(Os.textContent=Or),sl=p(e),Is=i(e,"P",{"data-svelte-h":!0}),d(Is)!=="svelte-1dx3a01"&&(Is.textContent=Ir),nl=p(e),Us=i(e,"P",{"data-svelte-h":!0}),d(Us)!=="svelte-gxsd2p"&&(Us.textContent=Ur),al=p(e),Es=i(e,"UL",{"data-svelte-h":!0}),d(Es)!=="svelte-x1w50s"&&(Es.innerHTML=Er),ol=p(e),Ws=i(e,"P",{"data-svelte-h":!0}),d(Ws)!=="svelte-1cyks1i"&&(Ws.innerHTML=Wr),ll=p(e),Ns=i(e,"P",{"data-svelte-h":!0}),d(Ns)!=="svelte-1e9qm2v"&&(Ns.textContent=Nr),il=p(e),Fs=i(e,"UL",{"data-svelte-h":!0}),d(Fs)!=="svelte-172itm0"&&(Fs.innerHTML=Fr),rl=p(e),js=i(e,"P",{"data-svelte-h":!0}),d(js)!=="svelte-nld7t3"&&(js.innerHTML=jr),this.h()},h(){f(a,"id","introduction"),f(L,"id","example"),f(P,"id","requirements"),f(D,"id","we-use-docker-oci-containers"),f(O,"id","basic-dockerized-rust-application"),f(W,"id","use-multi-stage-builds-to-minimize-the-image-size"),f(j,"id","image-variants"),f(z,"id","rustbookworm"),Tn.a=null,f(Xe,"class","language-dockerfile"),f(S,"id","rustslim-bookworm"),Hn.a=null,f(et,"class","language-dockerfile"),f(A,"id","gccbookworm"),In.a=null,f(st,"class","language-dockerfile"),f(Y,"id","cc-debian12debug"),Nn.a=null,f(at,"class","language-dockerfile"),f(B,"id","introduction-to-docker-layers-cache"),f(K,"id","caching-cargo-dependencies"),f(G,"id","demonstration-of-caching-cargo-dependencies-using-a-custom-solution"),f(J,"id","caching-cargo-dependencies-with-cargo-chef"),f(X,"id","installing-rust-binaries-with-cargo-binstall"),f(ee,"id","archiving-and-reusing-builds-with-cargo-nextest"),f(ne,"id","running-container-without-sudo"),f(le,"id","use-the-user-instruction"),f(ue,"id","use-the-docker-run---user-argument"),f(he,"id","create-the-user-at-runtime"),f(ge,"id","decomposing-the-torrust-tracker-containerfile"),f(Me,"id","other-good-practices"),f(Le,"id","other-considerations"),f(He,"id","links"),f(Pe,"id","conclusion")},m(e,t){n(e,a,t),n(e,k,t),n(e,o,t),n(e,$,t),n(e,M,t),n(e,qs,t),n(e,De,t),n(e,Bs,t),n(e,Oe,t),n(e,Ks,t),n(e,L,t),n(e,Gs,t),n(e,Ie,t),n(e,Vs,t),n(e,Ue,t),n(e,Js,t),w(H,e,t),n(e,Qs,t),n(e,Ee,t),n(e,Xs,t),n(e,We,t),n(e,Zs,t),n(e,P,t),n(e,en,t),n(e,Ne,t),n(e,tn,t),n(e,Fe,t),n(e,sn,t),n(e,D,t),n(e,nn,t),n(e,je,t),n(e,an,t),n(e,ze,t),n(e,on,t),n(e,Se,t),n(e,ln,t),n(e,O,t),n(e,rn,t),n(e,Ae,t),n(e,pn,t),w(I,e,t),n(e,cn,t),n(e,Ye,t),n(e,un,t),w(U,e,t),n(e,dn,t),n(e,qe,t),n(e,kn,t),w(E,e,t),n(e,hn,t),n(e,Be,t),n(e,fn,t),n(e,W,t),n(e,mn,t),n(e,Ke,t),n(e,gn,t),n(e,Ge,t),n(e,wn,t),w(N,e,t),n(e,bn,t),n(e,Ve,t),n(e,vn,t),w(F,e,t),n(e,yn,t),n(e,Je,t),n(e,$n,t),n(e,j,t),n(e,xn,t),n(e,Qe,t),n(e,_n,t),n(e,z,t),n(e,Cn,t),n(e,Xe,t),Tn.m(mp,Xe),n(e,Rn,t),n(e,Ze,t),n(e,Mn,t),n(e,S,t),n(e,Ln,t),n(e,et,t),Hn.m(gp,et),n(e,Pn,t),n(e,tt,t),n(e,Dn,t),n(e,A,t),n(e,On,t),n(e,st,t),In.m(wp,st),n(e,Un,t),n(e,nt,t),n(e,En,t),n(e,Y,t),n(e,Wn,t),n(e,at,t),Nn.m(bp,at),n(e,Fn,t),n(e,ot,t),n(e,jn,t),n(e,lt,t),n(e,zn,t),w(q,e,t),n(e,Sn,t),n(e,B,t),n(e,An,t),n(e,it,t),n(e,Yn,t),n(e,rt,t),n(e,qn,t),n(e,K,t),n(e,Bn,t),n(e,pt,t),n(e,Kn,t),n(e,ct,t),n(e,Gn,t),n(e,ut,t),n(e,Vn,t),n(e,dt,t),n(e,Jn,t),n(e,kt,t),n(e,Qn,t),n(e,G,t),n(e,Xn,t),n(e,ht,t),n(e,Zn,t),n(e,ft,t),n(e,ea,t),n(e,mt,t),n(e,ta,t),w(V,e,t),n(e,sa,t),n(e,gt,t),n(e,na,t),n(e,J,t),n(e,aa,t),n(e,wt,t),n(e,oa,t),w(Q,e,t),n(e,la,t),n(e,bt,t),n(e,ia,t),n(e,X,t),n(e,ra,t),n(e,vt,t),n(e,pa,t),n(e,yt,t),n(e,ca,t),n(e,$t,t),n(e,ua,t),w(Z,e,t),n(e,da,t),n(e,ee,t),n(e,ka,t),n(e,xt,t),n(e,ha,t),n(e,_t,t),n(e,fa,t),n(e,Ct,t),n(e,ma,t),n(e,Tt,t),n(e,ga,t),n(e,Rt,t),n(e,wa,t),n(e,Mt,t),n(e,ba,t),w(te,e,t),n(e,va,t),w(se,e,t),n(e,ya,t),n(e,ne,t),n(e,$a,t),n(e,Lt,t),n(e,xa,t),w(ae,e,t),n(e,_a,t),n(e,Ht,t),n(e,Ca,t),w(oe,e,t),n(e,Ta,t),n(e,Pt,t),n(e,Ra,t),n(e,Dt,t),n(e,Ma,t),n(e,Ot,t),n(e,La,t),n(e,It,t),n(e,Ha,t),n(e,le,t),n(e,Pa,t),w(ie,e,t),n(e,Da,t),n(e,Ut,t),n(e,Oa,t),w(re,e,t),n(e,Ia,t),n(e,Et,t),n(e,Ua,t),w(pe,e,t),n(e,Ea,t),n(e,Wt,t),n(e,Wa,t),w(ce,e,t),n(e,Na,t),n(e,Nt,t),n(e,Fa,t),n(e,ue,t),n(e,ja,t),n(e,Ft,t),n(e,za,t),w(de,e,t),n(e,Sa,t),n(e,jt,t),n(e,Aa,t),n(e,zt,t),n(e,Ya,t),w(ke,e,t),n(e,qa,t),n(e,St,t),n(e,Ba,t),n(e,At,t),n(e,Ka,t),n(e,Yt,t),n(e,Ga,t),n(e,he,t),n(e,Va,t),n(e,qt,t),n(e,Ja,t),w(fe,e,t),n(e,Qa,t),n(e,Bt,t),n(e,Xa,t),n(e,Kt,t),n(e,Za,t),n(e,Gt,t),n(e,eo,t),n(e,Vt,t),n(e,to,t),w(me,e,t),n(e,so,t),n(e,Jt,t),n(e,no,t),n(e,Qt,t),n(e,ao,t),n(e,Xt,t),n(e,oo,t),n(e,ge,t),n(e,lo,t),n(e,Zt,t),n(e,io,t),n(e,es,t),n(e,ro,t),n(e,ts,t),n(e,po,t),w(we,e,t),n(e,co,t),n(e,ss,t),n(e,uo,t),n(e,ns,t),n(e,ko,t),w(be,e,t),n(e,ho,t),n(e,as,t),n(e,fo,t),n(e,os,t),n(e,mo,t),w(ve,e,t),n(e,go,t),n(e,ls,t),n(e,wo,t),w(ye,e,t),n(e,bo,t),n(e,is,t),n(e,vo,t),n(e,rs,t),n(e,yo,t),w($e,e,t),n(e,$o,t),n(e,ps,t),n(e,xo,t),n(e,cs,t),n(e,_o,t),w(xe,e,t),n(e,Co,t),n(e,us,t),n(e,To,t),w(_e,e,t),n(e,Ro,t),n(e,ds,t),n(e,Mo,t),w(Ce,e,t),n(e,Lo,t),n(e,ks,t),n(e,Ho,t),w(Te,e,t),n(e,Po,t),n(e,hs,t),n(e,Do,t),w(Re,e,t),n(e,Oo,t),n(e,Me,t),n(e,Io,t),n(e,fs,t),n(e,Uo,t),n(e,Le,t),n(e,Eo,t),n(e,ms,t),n(e,Wo,t),n(e,He,t),n(e,No,t),n(e,gs,t),n(e,Fo,t),n(e,ws,t),n(e,jo,t),n(e,bs,t),n(e,zo,t),n(e,vs,t),n(e,So,t),n(e,ys,t),n(e,Ao,t),n(e,$s,t),n(e,Yo,t),n(e,xs,t),n(e,qo,t),n(e,_s,t),n(e,Bo,t),n(e,Cs,t),n(e,Ko,t),n(e,Ts,t),n(e,Go,t),n(e,Rs,t),n(e,Vo,t),n(e,Ms,t),n(e,Jo,t),n(e,Ls,t),n(e,Qo,t),n(e,Hs,t),n(e,Xo,t),n(e,Ps,t),n(e,Zo,t),n(e,Ds,t),n(e,el,t),n(e,Pe,t),n(e,tl,t),n(e,Os,t),n(e,sl,t),n(e,Is,t),n(e,nl,t),n(e,Us,t),n(e,al,t),n(e,Es,t),n(e,ol,t),n(e,Ws,t),n(e,ll,t),n(e,Ns,t),n(e,il,t),n(e,Fs,t),n(e,rl,t),n(e,js,t),pl=!0},p(e,t){const Ss={};t&1&&(Ss.$$scope={dirty:t,ctx:e}),H.$set(Ss);const As={};t&1&&(As.$$scope={dirty:t,ctx:e}),I.$set(As);const Ys={};t&1&&(Ys.$$scope={dirty:t,ctx:e}),U.$set(Ys);const zr={};t&1&&(zr.$$scope={dirty:t,ctx:e}),E.$set(zr);const Sr={};t&1&&(Sr.$$scope={dirty:t,ctx:e}),N.$set(Sr);const Ar={};t&1&&(Ar.$$scope={dirty:t,ctx:e}),F.$set(Ar);const Yr={};t&1&&(Yr.$$scope={dirty:t,ctx:e}),q.$set(Yr);const qr={};t&1&&(qr.$$scope={dirty:t,ctx:e}),V.$set(qr);const Br={};t&1&&(Br.$$scope={dirty:t,ctx:e}),Q.$set(Br);const Kr={};t&1&&(Kr.$$scope={dirty:t,ctx:e}),Z.$set(Kr);const Gr={};t&1&&(Gr.$$scope={dirty:t,ctx:e}),te.$set(Gr);const Vr={};t&1&&(Vr.$$scope={dirty:t,ctx:e}),se.$set(Vr);const Jr={};t&1&&(Jr.$$scope={dirty:t,ctx:e}),ae.$set(Jr);const Qr={};t&1&&(Qr.$$scope={dirty:t,ctx:e}),oe.$set(Qr);const Xr={};t&1&&(Xr.$$scope={dirty:t,ctx:e}),ie.$set(Xr);const Zr={};t&1&&(Zr.$$scope={dirty:t,ctx:e}),re.$set(Zr);const ep={};t&1&&(ep.$$scope={dirty:t,ctx:e}),pe.$set(ep);const tp={};t&1&&(tp.$$scope={dirty:t,ctx:e}),ce.$set(tp);const sp={};t&1&&(sp.$$scope={dirty:t,ctx:e}),de.$set(sp);const np={};t&1&&(np.$$scope={dirty:t,ctx:e}),ke.$set(np);const ap={};t&1&&(ap.$$scope={dirty:t,ctx:e}),fe.$set(ap);const op={};t&1&&(op.$$scope={dirty:t,ctx:e}),me.$set(op);const lp={};t&1&&(lp.$$scope={dirty:t,ctx:e}),we.$set(lp);const ip={};t&1&&(ip.$$scope={dirty:t,ctx:e}),be.$set(ip);const rp={};t&1&&(rp.$$scope={dirty:t,ctx:e}),ve.$set(rp);const pp={};t&1&&(pp.$$scope={dirty:t,ctx:e}),ye.$set(pp);const cp={};t&1&&(cp.$$scope={dirty:t,ctx:e}),$e.$set(cp);const up={};t&1&&(up.$$scope={dirty:t,ctx:e}),xe.$set(up);const dp={};t&1&&(dp.$$scope={dirty:t,ctx:e}),_e.$set(dp);const kp={};t&1&&(kp.$$scope={dirty:t,ctx:e}),Ce.$set(kp);const hp={};t&1&&(hp.$$scope={dirty:t,ctx:e}),Te.$set(hp);const fp={};t&1&&(fp.$$scope={dirty:t,ctx:e}),Re.$set(fp)},i(e){pl||(b(H.$$.fragment,e),b(I.$$.fragment,e),b(U.$$.fragment,e),b(E.$$.fragment,e),b(N.$$.fragment,e),b(F.$$.fragment,e),b(q.$$.fragment,e),b(V.$$.fragment,e),b(Q.$$.fragment,e),b(Z.$$.fragment,e),b(te.$$.fragment,e),b(se.$$.fragment,e),b(ae.$$.fragment,e),b(oe.$$.fragment,e),b(ie.$$.fragment,e),b(re.$$.fragment,e),b(pe.$$.fragment,e),b(ce.$$.fragment,e),b(de.$$.fragment,e),b(ke.$$.fragment,e),b(fe.$$.fragment,e),b(me.$$.fragment,e),b(we.$$.fragment,e),b(be.$$.fragment,e),b(ve.$$.fragment,e),b(ye.$$.fragment,e),b($e.$$.fragment,e),b(xe.$$.fragment,e),b(_e.$$.fragment,e),b(Ce.$$.fragment,e),b(Te.$$.fragment,e),b(Re.$$.fragment,e),pl=!0)},o(e){v(H.$$.fragment,e),v(I.$$.fragment,e),v(U.$$.fragment,e),v(E.$$.fragment,e),v(N.$$.fragment,e),v(F.$$.fragment,e),v(q.$$.fragment,e),v(V.$$.fragment,e),v(Q.$$.fragment,e),v(Z.$$.fragment,e),v(te.$$.fragment,e),v(se.$$.fragment,e),v(ae.$$.fragment,e),v(oe.$$.fragment,e),v(ie.$$.fragment,e),v(re.$$.fragment,e),v(pe.$$.fragment,e),v(ce.$$.fragment,e),v(de.$$.fragment,e),v(ke.$$.fragment,e),v(fe.$$.fragment,e),v(me.$$.fragment,e),v(we.$$.fragment,e),v(be.$$.fragment,e),v(ve.$$.fragment,e),v(ye.$$.fragment,e),v($e.$$.fragment,e),v(xe.$$.fragment,e),v(_e.$$.fragment,e),v(Ce.$$.fragment,e),v(Te.$$.fragment,e),v(Re.$$.fragment,e),pl=!1},d(e){e&&(s(a),s(k),s(o),s($),s(M),s(qs),s(De),s(Bs),s(Oe),s(Ks),s(L),s(Gs),s(Ie),s(Vs),s(Ue),s(Js),s(Qs),s(Ee),s(Xs),s(We),s(Zs),s(P),s(en),s(Ne),s(tn),s(Fe),s(sn),s(D),s(nn),s(je),s(an),s(ze),s(on),s(Se),s(ln),s(O),s(rn),s(Ae),s(pn),s(cn),s(Ye),s(un),s(dn),s(qe),s(kn),s(hn),s(Be),s(fn),s(W),s(mn),s(Ke),s(gn),s(Ge),s(wn),s(bn),s(Ve),s(vn),s(yn),s(Je),s($n),s(j),s(xn),s(Qe),s(_n),s(z),s(Cn),s(Xe),s(Rn),s(Ze),s(Mn),s(S),s(Ln),s(et),s(Pn),s(tt),s(Dn),s(A),s(On),s(st),s(Un),s(nt),s(En),s(Y),s(Wn),s(at),s(Fn),s(ot),s(jn),s(lt),s(zn),s(Sn),s(B),s(An),s(it),s(Yn),s(rt),s(qn),s(K),s(Bn),s(pt),s(Kn),s(ct),s(Gn),s(ut),s(Vn),s(dt),s(Jn),s(kt),s(Qn),s(G),s(Xn),s(ht),s(Zn),s(ft),s(ea),s(mt),s(ta),s(sa),s(gt),s(na),s(J),s(aa),s(wt),s(oa),s(la),s(bt),s(ia),s(X),s(ra),s(vt),s(pa),s(yt),s(ca),s($t),s(ua),s(da),s(ee),s(ka),s(xt),s(ha),s(_t),s(fa),s(Ct),s(ma),s(Tt),s(ga),s(Rt),s(wa),s(Mt),s(ba),s(va),s(ya),s(ne),s($a),s(Lt),s(xa),s(_a),s(Ht),s(Ca),s(Ta),s(Pt),s(Ra),s(Dt),s(Ma),s(Ot),s(La),s(It),s(Ha),s(le),s(Pa),s(Da),s(Ut),s(Oa),s(Ia),s(Et),s(Ua),s(Ea),s(Wt),s(Wa),s(Na),s(Nt),s(Fa),s(ue),s(ja),s(Ft),s(za),s(Sa),s(jt),s(Aa),s(zt),s(Ya),s(qa),s(St),s(Ba),s(At),s(Ka),s(Yt),s(Ga),s(he),s(Va),s(qt),s(Ja),s(Qa),s(Bt),s(Xa),s(Kt),s(Za),s(Gt),s(eo),s(Vt),s(to),s(so),s(Jt),s(no),s(Qt),s(ao),s(Xt),s(oo),s(ge),s(lo),s(Zt),s(io),s(es),s(ro),s(ts),s(po),s(co),s(ss),s(uo),s(ns),s(ko),s(ho),s(as),s(fo),s(os),s(mo),s(go),s(ls),s(wo),s(bo),s(is),s(vo),s(rs),s(yo),s($o),s(ps),s(xo),s(cs),s(_o),s(Co),s(us),s(To),s(Ro),s(ds),s(Mo),s(Lo),s(ks),s(Ho),s(Po),s(hs),s(Do),s(Oo),s(Me),s(Io),s(fs),s(Uo),s(Le),s(Eo),s(ms),s(Wo),s(He),s(No),s(gs),s(Fo),s(ws),s(jo),s(bs),s(zo),s(vs),s(So),s(ys),s(Ao),s($s),s(Yo),s(xs),s(qo),s(_s),s(Bo),s(Cs),s(Ko),s(Ts),s(Go),s(Rs),s(Vo),s(Ms),s(Jo),s(Ls),s(Qo),s(Hs),s(Xo),s(Ps),s(Zo),s(Ds),s(el),s(Pe),s(tl),s(Os),s(sl),s(Is),s(nl),s(Us),s(al),s(Es),s(ol),s(Ws),s(ll),s(Ns),s(il),s(Fs),s(rl),s(js)),y(H,e),y(I,e),y(U,e),y(E,e),y(N,e),y(F,e),y(q,e),y(V,e),y(Q,e),y(Z,e),y(te,e),y(se,e),y(ae,e),y(oe,e),y(ie,e),y(re,e),y(pe,e),y(ce,e),y(de,e),y(ke,e),y(fe,e),y(me,e),y(we,e),y(be,e),y(ve,e),y(ye,e),y($e,e),y(xe,e),y(_e,e),y(Ce,e),y(Te,e),y(Re,e)}}}function lc(h){let a,u,k,o;return a=new Cp({props:{$$slots:{default:[Tp]},$$scope:{ctx:h}}}),k=new _p({props:{$$slots:{default:[oc]},$$scope:{ctx:h}}}),{c(){m(a.$$.fragment),u=r(),m(k.$$.fragment)},l(c){g(a.$$.fragment,c),u=p(c),g(k.$$.fragment,c)},m(c,$){w(a,c,$),n(c,u,$),w(k,c,$),o=!0},p(c,$){const M={};$&1&&(M.$$scope={dirty:$,ctx:c}),a.$set(M);const zs={};$&1&&(zs.$$scope={dirty:$,ctx:c}),k.$set(zs)},i(c){o||(b(a.$$.fragment,c),b(k.$$.fragment,c),o=!0)},o(c){v(a.$$.fragment,c),v(k.$$.fragment,c),o=!1},d(c){c&&s(u),y(a,c),y(k,c)}}}function ic(h){let a,u;return a=new xp({props:{$$slots:{default:[lc]},$$scope:{ctx:h}}}),{c(){m(a.$$.fragment)},l(k){g(a.$$.fragment,k)},m(k,o){w(a,k,o),u=!0},p(k,[o]){const c={};o&1&&(c.$$scope={dirty:o,ctx:k}),a.$set(c)},i(k){u||(b(a.$$.fragment,k),u=!0)},o(k){v(a.$$.fragment,k),u=!1},d(k){y(a,k)}}}const rc={title:"Containerizing Rust Applications",slug:"containerizing-rust-applications-best-practices",coverImage:"/images/posts/rust-crab-carrying-a-shipping-container.jpeg",date:"2023-11-09T12:08:04.295Z",updated:null,excerpt:"Torrust services (Tracker and Index) support docker, we want to ensure that contributors understand our containerfile and we also want to share good practices for containerizing Rust applications.",contributor:"Jose Celano",contributorSlug:"jose-celano",tags:["Documentation","Docker","Containers","Rust"],hidden:!1};class pc extends yp{constructor(a){super(),$p(this,a,null,ic,vp,{})}}const gc=Object.freeze(Object.defineProperty({__proto__:null,default:pc,metadata:rc},Symbol.toStringTag,{value:"Module"}));export{pc as P,gc as _};
